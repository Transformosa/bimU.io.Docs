{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bimU.io Viewer Overview \u00b6 bimU.io Viewer is a full-fledged online BIM model viewer that truly works for every project member. BIM is not exclusive to BIM managers and technicians. We've built an easy-to-use platform for everyone to review 3D design data without getting hands dirty. Simply upload your BIM model and it will be accessible via a browser instantly. Do some markups then share it securely or embed it in your collaboration software. All can be done with the Free version of bimU.io Viewer. Log in to bimU.io Viewer Fully Functional Design Review Tool \u00b6 What's more than a 3D visulisation tool? bimU.io Viewer is natively built for reviewing engineering design in the Cloud. It includes everything you need to interrogate BIM data, such as versatile 3D navigation tools, a cloud-hosted BIM database, an interoperable markup view, etc. bimU.io transforms your BIM model to a lightweight BIM format that is blazingly fast and smooth over the internet and available on all your devices. What you really need is just a modern web browser! Sharing BIM Made Easy \u00b6 Sharing a BIM model with your teams has never been so easy. Generating a password-protected link is safe and quick. You can also view a bimU.io hosted model from other applications, such as a project site or a collaboration workspace, by inserting an embed code. bimU.io Viewer is fully-managed. No additional server or account management work is required. You can log in to bimU.io with your company or organisational account. And most importantly, you have full control over your BIM models. Seamless Integration with Authoring Software \u00b6 Currently, supported BIM authoring tools and file format include Autodesk Revit, Autodesk Navisworks, Trimble Tekla Structures, and IFC (Industry Foundation Classes). bimU.io is backed by the so-called Pluginless technology that is made to exchange data with BIM software without leaving web browser. You only have to work with one single user interface! Isn't this briliiant? A 3D model view can be uploaded directly from any of supported BIM software via browser. By opening a saved viewpoint attached to a markup, bimU.io can navigate you to the same location in any of supported BIM software, too. Feature List \u00b6 Cross-platform across all devices, including desktop, tablet, phone, etc. A variety of 3D navigation tools, such as orbit, rotate, pan, zoom, zoom to fit, zoom to selection, section box, section around selection, hide elements, measuring tools, fullscreen mode, etc. Create markups with free-hand drawings, comments, and a saved camera viewpoint. Query BIM data on the fly without downloading the whole database, including element properties, document properties, project information, file metadata, etc. Upload a partial or entire model with current view settings from BIM software with the \"Pluginless\" technology. Open a saved viewpoint in bimU.io 3D viewer or navigate to the same location in BIM software. Upload open standard IFC files directly via browser. Single Sign-On (SSO) support via Google OAuth and Microsoft Azure Active Directory. Share a BIM model publicly or with a password-protected link. Embed a BIM model in other software, such as Microsoft Teams, Microsoft SharePoint, or your own website. Real-time browser notification and email notification. Categorise models by colored labels. Video Podcast \u00b6 We are constantly adding short clips to the playlist below to demonstrate the functionality of bimU.io. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates. User Support \u00b6 bimU.io Support Centre provides different types of help: FAQ: You can find a list of Frequently Asked Questions (FAQ) and answers. Community Forum: Participate in discussion and look for advice in our community forum. Service Desk: Please report a problem by logging a support ticket. Our customer service representatives will be in touch to sort your issue.","title":"bimU.io Viewer"},{"location":"#bimuio-viewer-overview","text":"bimU.io Viewer is a full-fledged online BIM model viewer that truly works for every project member. BIM is not exclusive to BIM managers and technicians. We've built an easy-to-use platform for everyone to review 3D design data without getting hands dirty. Simply upload your BIM model and it will be accessible via a browser instantly. Do some markups then share it securely or embed it in your collaboration software. All can be done with the Free version of bimU.io Viewer. Log in to bimU.io Viewer","title":"bimU.io Viewer Overview"},{"location":"#fully-functional-design-review-tool","text":"What's more than a 3D visulisation tool? bimU.io Viewer is natively built for reviewing engineering design in the Cloud. It includes everything you need to interrogate BIM data, such as versatile 3D navigation tools, a cloud-hosted BIM database, an interoperable markup view, etc. bimU.io transforms your BIM model to a lightweight BIM format that is blazingly fast and smooth over the internet and available on all your devices. What you really need is just a modern web browser!","title":"Fully Functional Design Review Tool"},{"location":"#sharing-bim-made-easy","text":"Sharing a BIM model with your teams has never been so easy. Generating a password-protected link is safe and quick. You can also view a bimU.io hosted model from other applications, such as a project site or a collaboration workspace, by inserting an embed code. bimU.io Viewer is fully-managed. No additional server or account management work is required. You can log in to bimU.io with your company or organisational account. And most importantly, you have full control over your BIM models.","title":"Sharing BIM Made Easy"},{"location":"#seamless-integration-with-authoring-software","text":"Currently, supported BIM authoring tools and file format include Autodesk Revit, Autodesk Navisworks, Trimble Tekla Structures, and IFC (Industry Foundation Classes). bimU.io is backed by the so-called Pluginless technology that is made to exchange data with BIM software without leaving web browser. You only have to work with one single user interface! Isn't this briliiant? A 3D model view can be uploaded directly from any of supported BIM software via browser. By opening a saved viewpoint attached to a markup, bimU.io can navigate you to the same location in any of supported BIM software, too.","title":"Seamless Integration with Authoring Software"},{"location":"#feature-list","text":"Cross-platform across all devices, including desktop, tablet, phone, etc. A variety of 3D navigation tools, such as orbit, rotate, pan, zoom, zoom to fit, zoom to selection, section box, section around selection, hide elements, measuring tools, fullscreen mode, etc. Create markups with free-hand drawings, comments, and a saved camera viewpoint. Query BIM data on the fly without downloading the whole database, including element properties, document properties, project information, file metadata, etc. Upload a partial or entire model with current view settings from BIM software with the \"Pluginless\" technology. Open a saved viewpoint in bimU.io 3D viewer or navigate to the same location in BIM software. Upload open standard IFC files directly via browser. Single Sign-On (SSO) support via Google OAuth and Microsoft Azure Active Directory. Share a BIM model publicly or with a password-protected link. Embed a BIM model in other software, such as Microsoft Teams, Microsoft SharePoint, or your own website. Real-time browser notification and email notification. Categorise models by colored labels.","title":"Feature List"},{"location":"#video-podcast","text":"We are constantly adding short clips to the playlist below to demonstrate the functionality of bimU.io. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates.","title":"Video Podcast"},{"location":"#user-support","text":"bimU.io Support Centre provides different types of help: FAQ: You can find a list of Frequently Asked Questions (FAQ) and answers. Community Forum: Participate in discussion and look for advice in our community forum. Service Desk: Please report a problem by logging a support ticket. Our customer service representatives will be in touch to sort your issue.","title":"User Support"},{"location":"embed-in-other-applications/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"embed-in-other-applications/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"log-in-to-bimu-viewer/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"log-in-to-bimu-viewer/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"manage-bim-models/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"manage-bim-models/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"navigate-using-web-viewer/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"navigate-using-web-viewer/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"privacy-policy/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"privacy-policy/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"release-notes/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"release-notes/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"terms-of-service/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"terms-of-service/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"upload-a-bim-model/","text":"This page has moved to a new location. Redirecting... \u00b6","title":"This page has moved to a new location. Redirecting..."},{"location":"upload-a-bim-model/#this-page-has-moved-to-a-new-location-redirecting","text":"","title":"This page has moved to a new location. Redirecting..."},{"location":"agile/collaborate-in-a-channel/","text":"Collaborate in a Channel \u00b6 A Channel on bimU.io Agile is a workspace where you and your team members can collaborate. It is a team environment that creates a secure boundary around your BIM models, issues, collaborators, etc. Why \"Channel\"? \u00b6 We call it Channel expressly for a number of reasons: It is a more generic term. Words like project, group, etc. can be quite specific in an organisation. It works with different levels of granularity, e.g. a package in a big project. It aligns with communication tools, e.g. Microsoft Teams, Slack, etc. View All Channels \u00b6 To view all channels, you can either click the tiles icon button on the top menu bar or click the VIEW ALL CHANNELS button in the Pinned Channels panel on the dashboard. Create Channel \u00b6 Click the CREATE CHANNEL button to create a new channel. If the Create channel with sample data option is ticked, sample issues and sample models will be added to the new channel created. Pin Channel \u00b6 You can pin a channel to the dashboard for quicker access. Update Channel Details \u00b6 If you want to change chanel name or description, go to the Settings page of a channel. Leave Channel \u00b6 To leave a channel, go to the Members page and click the LEAVE CHANNEL button. You will no longer have access to this channel. Note that you can't leave a channel if you're the only one channel admin. Archive Channel \u00b6 When a project is finished, you might want to close out a channel while maintaining all the data. bimU.io Agile provides an archving option to make a channel completely hidden without losing any data. Go to the Settings page and scroll all the way down. You can do it from the Danger Zone . Reactivate Channel \u00b6 If you change your mind, it is fairly easy to make an archived channel visible again. Go to the All Channels page and click the VIEW ARCHIVED CHANNELS button. In the dialog, find an archived channel and click the Reactivate icon button. Delete Channel \u00b6 We suggest you only delete a channel when necessary since all the data will be permanently erased on bimU.io Aigle's server, including issues, comments, models, etc. Go to the Settings page and scroll all the way down. You can do it from the Danger Zone .","title":"Collaborate in a Channel"},{"location":"agile/collaborate-in-a-channel/#collaborate-in-a-channel","text":"A Channel on bimU.io Agile is a workspace where you and your team members can collaborate. It is a team environment that creates a secure boundary around your BIM models, issues, collaborators, etc.","title":"Collaborate in a Channel"},{"location":"agile/collaborate-in-a-channel/#why-channel","text":"We call it Channel expressly for a number of reasons: It is a more generic term. Words like project, group, etc. can be quite specific in an organisation. It works with different levels of granularity, e.g. a package in a big project. It aligns with communication tools, e.g. Microsoft Teams, Slack, etc.","title":"Why \"Channel\"?"},{"location":"agile/collaborate-in-a-channel/#view-all-channels","text":"To view all channels, you can either click the tiles icon button on the top menu bar or click the VIEW ALL CHANNELS button in the Pinned Channels panel on the dashboard.","title":"View All Channels"},{"location":"agile/collaborate-in-a-channel/#create-channel","text":"Click the CREATE CHANNEL button to create a new channel. If the Create channel with sample data option is ticked, sample issues and sample models will be added to the new channel created.","title":"Create Channel"},{"location":"agile/collaborate-in-a-channel/#pin-channel","text":"You can pin a channel to the dashboard for quicker access.","title":"Pin Channel"},{"location":"agile/collaborate-in-a-channel/#update-channel-details","text":"If you want to change chanel name or description, go to the Settings page of a channel.","title":"Update Channel Details"},{"location":"agile/collaborate-in-a-channel/#leave-channel","text":"To leave a channel, go to the Members page and click the LEAVE CHANNEL button. You will no longer have access to this channel. Note that you can't leave a channel if you're the only one channel admin.","title":"Leave Channel"},{"location":"agile/collaborate-in-a-channel/#archive-channel","text":"When a project is finished, you might want to close out a channel while maintaining all the data. bimU.io Agile provides an archving option to make a channel completely hidden without losing any data. Go to the Settings page and scroll all the way down. You can do it from the Danger Zone .","title":"Archive Channel"},{"location":"agile/collaborate-in-a-channel/#reactivate-channel","text":"If you change your mind, it is fairly easy to make an archived channel visible again. Go to the All Channels page and click the VIEW ARCHIVED CHANNELS button. In the dialog, find an archived channel and click the Reactivate icon button.","title":"Reactivate Channel"},{"location":"agile/collaborate-in-a-channel/#delete-channel","text":"We suggest you only delete a channel when necessary since all the data will be permanently erased on bimU.io Aigle's server, including issues, comments, models, etc. Go to the Settings page and scroll all the way down. You can do it from the Danger Zone .","title":"Delete Channel"},{"location":"agile/configure-issue-fields/","text":"Configure Issue Fields \u00b6 Issue field is basically metadata which provides additional information about an issue. It also allows project teams to captures data individually so that it\u2019s easy to search and track later. Configurable Issue Fields \u00b6 Below issue fields are configurable. You can add a new option, edit an existing option, or delete an option that is no longer required. For issue types, statuses, and priorities, every option can have a different color and icon for better readability. Type \u00b6 Issue types distinguish different types of tracked items to help you identify, categorise, and report on your team\u2019s work. Default issue types are Clash , Comment , Non-Compliance , Constructability , RFI . Status \u00b6 Issue statues define how an issue should be progressed in your workflow. The first status in the list is the initial status while the last status in the list is the final status. If an issue is in the final status, it is considered resolved and closed. Default issue statuses are To Do , In Progress , In Review , Done . Priority \u00b6 Issue priorities can be used to indicate if an issue has greater urgency than others. Default issue priorities are High , Medium , Low . Discipline \u00b6 Disciplines are very project specific. You should define what disciplines should be involved in your design review workflow. Default disciplines are Architecture , Structure , MEP , Fa\u00e7ade , Civil . Zone \u00b6 Zones are particular areas in your project. For a building project, it can be a floor or a space. For an infrastructure project, it can be a package or a section. Default zones are GF , 1FL , 2FL , RF . Add New Issue Field Option \u00b6 Click the ADD button next to an issue field to create a new option. Edit Issue Field Option \u00b6 Click the edit button next to an option to modify it. Delete Issue Field Option \u00b6 Click the delete button next to an option to delete it. You must also select a replacement option. Issues that currently have the deleted option will be replaced by the selected replacement option. Non-configurable Issue Fields \u00b6 There are also some issue fields that don't have modifiable options and therefore not configurable. Title \u00b6 A short summary of what an issue is about. Description \u00b6 A detailed description of an issue. Assignees \u00b6 Assignees are who should be responsible to work on an issue and resolve it. You can select multiple active channel members from the list. Due Date \u00b6 Due date is when an issue should be closed out by.","title":"Configure Issue Fields"},{"location":"agile/configure-issue-fields/#configure-issue-fields","text":"Issue field is basically metadata which provides additional information about an issue. It also allows project teams to captures data individually so that it\u2019s easy to search and track later.","title":"Configure Issue Fields"},{"location":"agile/configure-issue-fields/#configurable-issue-fields","text":"Below issue fields are configurable. You can add a new option, edit an existing option, or delete an option that is no longer required. For issue types, statuses, and priorities, every option can have a different color and icon for better readability.","title":"Configurable Issue Fields"},{"location":"agile/configure-issue-fields/#type","text":"Issue types distinguish different types of tracked items to help you identify, categorise, and report on your team\u2019s work. Default issue types are Clash , Comment , Non-Compliance , Constructability , RFI .","title":"Type"},{"location":"agile/configure-issue-fields/#status","text":"Issue statues define how an issue should be progressed in your workflow. The first status in the list is the initial status while the last status in the list is the final status. If an issue is in the final status, it is considered resolved and closed. Default issue statuses are To Do , In Progress , In Review , Done .","title":"Status"},{"location":"agile/configure-issue-fields/#priority","text":"Issue priorities can be used to indicate if an issue has greater urgency than others. Default issue priorities are High , Medium , Low .","title":"Priority"},{"location":"agile/configure-issue-fields/#discipline","text":"Disciplines are very project specific. You should define what disciplines should be involved in your design review workflow. Default disciplines are Architecture , Structure , MEP , Fa\u00e7ade , Civil .","title":"Discipline"},{"location":"agile/configure-issue-fields/#zone","text":"Zones are particular areas in your project. For a building project, it can be a floor or a space. For an infrastructure project, it can be a package or a section. Default zones are GF , 1FL , 2FL , RF .","title":"Zone"},{"location":"agile/configure-issue-fields/#add-new-issue-field-option","text":"Click the ADD button next to an issue field to create a new option.","title":"Add New Issue Field Option"},{"location":"agile/configure-issue-fields/#edit-issue-field-option","text":"Click the edit button next to an option to modify it.","title":"Edit Issue Field Option"},{"location":"agile/configure-issue-fields/#delete-issue-field-option","text":"Click the delete button next to an option to delete it. You must also select a replacement option. Issues that currently have the deleted option will be replaced by the selected replacement option.","title":"Delete Issue Field Option"},{"location":"agile/configure-issue-fields/#non-configurable-issue-fields","text":"There are also some issue fields that don't have modifiable options and therefore not configurable.","title":"Non-configurable Issue Fields"},{"location":"agile/configure-issue-fields/#title","text":"A short summary of what an issue is about.","title":"Title"},{"location":"agile/configure-issue-fields/#description","text":"A detailed description of an issue.","title":"Description"},{"location":"agile/configure-issue-fields/#assignees","text":"Assignees are who should be responsible to work on an issue and resolve it. You can select multiple active channel members from the list.","title":"Assignees"},{"location":"agile/configure-issue-fields/#due-date","text":"Due date is when an issue should be closed out by.","title":"Due Date"},{"location":"agile/gain-insight-from-analytics/","text":"Gain Insight from Analytics \u00b6 The Analytics page provides some necessary statistics and accountability measures to ensure that issues are progressed and resolved in a satisfactory manner. Issue Metrics \u00b6 This shows the total number of issues and how many of them are unassigned, overdue, active, and closed. Issue Field Pie Charts \u00b6 For every quantifiable issue field, there's a corresponding pie chart to show the percentage of every option. Issue Burnup Chart \u00b6 A burnup chart is a tool used to track how many issues have been resolved (i.e. moved to the final status), and show the total number of issues in a channel. Issue Cumulative Flow \u00b6 A cumulative flow is an area chart that shows the various issue statuses over time. Each coloured area of the chart equates to an issue status. Issue Daily Counts \u00b6 This is similar to the burnup chart but in a bar chart format. Responsibility Matrix \u00b6 A responsibility matrix is a tool to monitor workload for every assignee as per status or priority.","title":"Gain Insight from Analytics"},{"location":"agile/gain-insight-from-analytics/#gain-insight-from-analytics","text":"The Analytics page provides some necessary statistics and accountability measures to ensure that issues are progressed and resolved in a satisfactory manner.","title":"Gain Insight from Analytics"},{"location":"agile/gain-insight-from-analytics/#issue-metrics","text":"This shows the total number of issues and how many of them are unassigned, overdue, active, and closed.","title":"Issue Metrics"},{"location":"agile/gain-insight-from-analytics/#issue-field-pie-charts","text":"For every quantifiable issue field, there's a corresponding pie chart to show the percentage of every option.","title":"Issue Field Pie Charts"},{"location":"agile/gain-insight-from-analytics/#issue-burnup-chart","text":"A burnup chart is a tool used to track how many issues have been resolved (i.e. moved to the final status), and show the total number of issues in a channel.","title":"Issue Burnup Chart"},{"location":"agile/gain-insight-from-analytics/#issue-cumulative-flow","text":"A cumulative flow is an area chart that shows the various issue statuses over time. Each coloured area of the chart equates to an issue status.","title":"Issue Cumulative Flow"},{"location":"agile/gain-insight-from-analytics/#issue-daily-counts","text":"This is similar to the burnup chart but in a bar chart format.","title":"Issue Daily Counts"},{"location":"agile/gain-insight-from-analytics/#responsibility-matrix","text":"A responsibility matrix is a tool to monitor workload for every assignee as per status or priority.","title":"Responsibility Matrix"},{"location":"agile/get-started/","text":"Get Started with bimU.io Agile \u00b6 This is a quick start guide to walk you through some basic functionality on bimU.io Agile. Log in to bimU.io Agile \u00b6 Single Sign-On (SSO) is enforced on bimU.io Agile. Every user needs to have a Microsoft or Google account to log in. It can be a company, school, organisation, or personal account. Simply go to bimU.io Agile and select preferred login method to continue. If you're a first-time user, make sure your profile is correct before creating a bimU.io Agile account. Welcome Information \u00b6 You'll see a welcome screen if you don't have any active channel. Try to install bimU.io Launcher if you want to upload models from BIM software. Documentation is also available. Create New Channel \u00b6 Channel is a workspace for team collaboration where BIM models and issues are stored. Click the CREATE MY FIRST CHANNEL button to create a new channel. Make sure Create channel with sample data is ticked if you'd like to view sample issues and sample models. Once a channel is created, you'll see an issue list view by default. The navigation menu on the left-hand side is specific to this channel. There are also some quick actions available on the top menu bar. Invite Your Team Members \u00b6 Now it's time to add your project team members to this channel. Click the + button on the top menu and select Add Member . You can then send invites to multiple email addresses. Your team members can join the channel from a unique link in the email. They'll be logging in to bimU.io Agile in the same way. Create New Issue \u00b6 Issue is usually a problem found in BIM models that you want to capture and track. Click the CREATE ISSUE button on the left menu to create a new issue. If you already have bimU.io Launcher installed and supported BIM software opened, it is possible to capture a snapshot of the active 3D view and its camera viewpoint. Fill in relevant issue information and then click Create . Kanban Board \u00b6 You can review issues on the Kanban board that visually categorises issues in vertical columns. Drag an issue card and put it into another column to push it forward. Click on an issue card to see its details. Moreover, you can open a saved viewpoint in BIM software or in bimU.io Agile's online model viewer. Navigate BIM Models \u00b6 Click the UPLOAD MODEL button on the left menu to upload an IFC file or export a model view from BIM software. Once uploaded, it will show up on the Models page. We also provide some sample models for you to play around. Select a model file to open up the web viewer. 3D navigation tools are available on the toolbar. Element properties, model metadata, etc. can be viewed from the right panels. Issues and Web Viewer \u00b6 You can also create or view issues directly from bimU.io's web viewer. If a BIM model is opened in the web viewer, a snapshot of the current view as well as its camera viewpoint will automatically be captured when you create an issue. There's also an Issues panel on the right-hand side that allows you to view issues side by side and open viewpoints more quickly. Personal Dashboard \u00b6 Personal dashboard is bimU.io Agile's landing page. It puts together some updates, including pinned channels, recently viewed issues, recently uploaded models, issues assigned, issues due, etc. Personal Profile \u00b6 Make your profile complete allows your collaborators to know your project or business role. Open your profile from the top right avatar, then you can change your name, company, and job title.","title":"Get Started with bimU.io Agile"},{"location":"agile/get-started/#get-started-with-bimuio-agile","text":"This is a quick start guide to walk you through some basic functionality on bimU.io Agile.","title":"Get Started with bimU.io Agile"},{"location":"agile/get-started/#log-in-to-bimuio-agile","text":"Single Sign-On (SSO) is enforced on bimU.io Agile. Every user needs to have a Microsoft or Google account to log in. It can be a company, school, organisation, or personal account. Simply go to bimU.io Agile and select preferred login method to continue. If you're a first-time user, make sure your profile is correct before creating a bimU.io Agile account.","title":"Log in to bimU.io Agile"},{"location":"agile/get-started/#welcome-information","text":"You'll see a welcome screen if you don't have any active channel. Try to install bimU.io Launcher if you want to upload models from BIM software. Documentation is also available.","title":"Welcome Information"},{"location":"agile/get-started/#create-new-channel","text":"Channel is a workspace for team collaboration where BIM models and issues are stored. Click the CREATE MY FIRST CHANNEL button to create a new channel. Make sure Create channel with sample data is ticked if you'd like to view sample issues and sample models. Once a channel is created, you'll see an issue list view by default. The navigation menu on the left-hand side is specific to this channel. There are also some quick actions available on the top menu bar.","title":"Create New Channel"},{"location":"agile/get-started/#invite-your-team-members","text":"Now it's time to add your project team members to this channel. Click the + button on the top menu and select Add Member . You can then send invites to multiple email addresses. Your team members can join the channel from a unique link in the email. They'll be logging in to bimU.io Agile in the same way.","title":"Invite Your Team Members"},{"location":"agile/get-started/#create-new-issue","text":"Issue is usually a problem found in BIM models that you want to capture and track. Click the CREATE ISSUE button on the left menu to create a new issue. If you already have bimU.io Launcher installed and supported BIM software opened, it is possible to capture a snapshot of the active 3D view and its camera viewpoint. Fill in relevant issue information and then click Create .","title":"Create New Issue"},{"location":"agile/get-started/#kanban-board","text":"You can review issues on the Kanban board that visually categorises issues in vertical columns. Drag an issue card and put it into another column to push it forward. Click on an issue card to see its details. Moreover, you can open a saved viewpoint in BIM software or in bimU.io Agile's online model viewer.","title":"Kanban Board"},{"location":"agile/get-started/#navigate-bim-models","text":"Click the UPLOAD MODEL button on the left menu to upload an IFC file or export a model view from BIM software. Once uploaded, it will show up on the Models page. We also provide some sample models for you to play around. Select a model file to open up the web viewer. 3D navigation tools are available on the toolbar. Element properties, model metadata, etc. can be viewed from the right panels.","title":"Navigate BIM Models"},{"location":"agile/get-started/#issues-and-web-viewer","text":"You can also create or view issues directly from bimU.io's web viewer. If a BIM model is opened in the web viewer, a snapshot of the current view as well as its camera viewpoint will automatically be captured when you create an issue. There's also an Issues panel on the right-hand side that allows you to view issues side by side and open viewpoints more quickly.","title":"Issues and Web Viewer"},{"location":"agile/get-started/#personal-dashboard","text":"Personal dashboard is bimU.io Agile's landing page. It puts together some updates, including pinned channels, recently viewed issues, recently uploaded models, issues assigned, issues due, etc.","title":"Personal Dashboard"},{"location":"agile/get-started/#personal-profile","text":"Make your profile complete allows your collaborators to know your project or business role. Open your profile from the top right avatar, then you can change your name, company, and job title.","title":"Personal Profile"},{"location":"agile/manage-and-resolve-issues/","text":"Manage and Resolve Issues \u00b6 bimU.io Agile has a comprehensive issue tracking capability for recording and managing problems or tasks in BIM models. An issue can be anything from an interdisciplinary clash to a constructability problem. You can also add Markup to a BIM Snapshot with a saved Viewpoint while creating a new issue. Subsequently, you can review issues and open corresponding camera viewpoints across multiple BIM environments, including BIM modelling tools, BIM clash detection tools, and bimU.io Agile's online model viewer. Create Issue \u00b6 Click the CREATE ISSUE button on the left menu to create a new issue. Alternatively, you can do it from the plus button in the top menu bar. BIM Snapshot \u00b6 Having a BIM snapshot attached to an issue is helpful to review from the same viewpoint later on. bimU.io Agile can navigate you to the same location in 3D environment. There are two ways to add a snapshot of the active BIM model view along with its camera viewpoint: Add snapshot from BIM Software: Make sure you have bimU.io Launcher installed and have supported BIM software opened. The Snapshot from BIM Software dropdown will show a list of available BIM software for you to select. If you'd like to track down some model elements, remember to select them in the active view. Having section box enabled and clipped to a small range makes the camera viewpoint saved more precisely. Add snapshot from Web Viewer: Open a BIM model in bimU.io Agile's web viewer and then try to create a new issue. A snapshot of the current view should automatically be added. Markup Tool \u00b6 You can add markup to a snapshot to provide more context. The markup tool allows you to create lines, shapes, texts, etc. to annotate model view. Click the edit button to open the markup tool. If you want to start over, click the delete button. Camera View and Attached Elements \u00b6 If a snapsoht is created from BIM software, camera view type and number of selected elements will be shown on the bottom. This information will be useful when you open a viewpoint later. Issue Fields \u00b6 Every issue has a number of issue fields associated with it, including title , description , type , status , priority , assignees , disciplines , zones , due date , etc. These issue fields are configurable. You can change available options based on project requirements. See Configure Issue Fields for more information. Create Issues with Similar Settings \u00b6 Occasionally you might want to create issues consecutively with the same issue type, disciplines, zones, etc. Tick the Create another check box. Then you can create another issue with the same options selected. View Issues in Issue List \u00b6 Go to the Issues page to view all issues in a table. You can turn on/off table columns from the toolbar. View Issues on Kanban Board \u00b6 Go to the Board page to view all issues on a Kanban board. Every issue is represented in a card and categorised in different columns by issue statuses. You can change row grouping, column grouping, and display order from the toolbar. If you drag and drop an issue card into a different column or row, the issue fields will also change accordingly. View Issues alongside Web Viewer \u00b6 Open a BIM model in bimU.io Agile's web viewer and click the Issues icon button on the right toolbar. All issues in the current channel will show up on an Issues panel. You can quickly open a saved viewpoint in the web viewer from an issue card. You must have an identical BIM model uploaded to bimU.io Agile in the first place. Issue Filters \u00b6 You can find issues more quickly with certain conditions, i.e. an issue field has specific values. Issue filters are available on the Issues page, the Board page, and the Issues panel. Click the reset button to clear all filters. View and Update Issue Details \u00b6 Clicking an issue on either a table row or a card will open up a dialog that shows issue details. Every channel member can update issue fields and leave comments here. Click on the image to view markup and snapshot in its original size. Open Viewpoint \u00b6 Saved viewpoint can be opened in supported BIM software or in bimU.io Agile's web viewer. Click the magnifier button and select where you want the viewpoint to be opened. The underlying principle is similar to BCF (BIM Collaboration Format) viewpoint . Before opening a viewpoint, you must also open the original BIM model file or an identical BIM model. Open Viewpoint in BIM Software \u00b6 Again, make sure you have bimU.io Launcher installed and have supported BIM software opened. If the current viewpoint has attached elements, i.e. some elements were selected during issue creation, you can select and/or isolate attached elements to find them more easily in the active model view. A perspective viewpoint will be opened as a camera view in Autodesk Revit which is a bit clunky to navigate. Use orthographic view to create an issue if you're going to review it in Revit. Open Viewpoint in Web Viewer \u00b6 If you have the Issues panel opened alongside the web viewer, simply click the magnifier button on an issue card to open viewpoint. If you have the web viewer opened in another browswer window, you can open viewpoint from the issue details dialog. This is particularly useful when you have multiple monitors. For example, you can use the Kanban board and the web viewer at the same time by putting them on different screens. Move Issues Forward \u00b6 Every issue should be progressively closed out based on the sequence of issue statuses. You can find more information here . If you have issues grouped by status in board columns, it's the easiest way to move issues to the next status column by drag-and-drop. Alternatively, you can change issue status in the issue details dialog. Delete Issue \u00b6 You can delete issues that were created by youself. Only a channel admin has permission to delete every issue. To delete an issue, click the three dot button on the top right in the issue details dialog and select Delete .","title":"Manage and Resolve Issues"},{"location":"agile/manage-and-resolve-issues/#manage-and-resolve-issues","text":"bimU.io Agile has a comprehensive issue tracking capability for recording and managing problems or tasks in BIM models. An issue can be anything from an interdisciplinary clash to a constructability problem. You can also add Markup to a BIM Snapshot with a saved Viewpoint while creating a new issue. Subsequently, you can review issues and open corresponding camera viewpoints across multiple BIM environments, including BIM modelling tools, BIM clash detection tools, and bimU.io Agile's online model viewer.","title":"Manage and Resolve Issues"},{"location":"agile/manage-and-resolve-issues/#create-issue","text":"Click the CREATE ISSUE button on the left menu to create a new issue. Alternatively, you can do it from the plus button in the top menu bar.","title":"Create Issue"},{"location":"agile/manage-and-resolve-issues/#bim-snapshot","text":"Having a BIM snapshot attached to an issue is helpful to review from the same viewpoint later on. bimU.io Agile can navigate you to the same location in 3D environment. There are two ways to add a snapshot of the active BIM model view along with its camera viewpoint: Add snapshot from BIM Software: Make sure you have bimU.io Launcher installed and have supported BIM software opened. The Snapshot from BIM Software dropdown will show a list of available BIM software for you to select. If you'd like to track down some model elements, remember to select them in the active view. Having section box enabled and clipped to a small range makes the camera viewpoint saved more precisely. Add snapshot from Web Viewer: Open a BIM model in bimU.io Agile's web viewer and then try to create a new issue. A snapshot of the current view should automatically be added.","title":"BIM Snapshot"},{"location":"agile/manage-and-resolve-issues/#markup-tool","text":"You can add markup to a snapshot to provide more context. The markup tool allows you to create lines, shapes, texts, etc. to annotate model view. Click the edit button to open the markup tool. If you want to start over, click the delete button.","title":"Markup Tool"},{"location":"agile/manage-and-resolve-issues/#camera-view-and-attached-elements","text":"If a snapsoht is created from BIM software, camera view type and number of selected elements will be shown on the bottom. This information will be useful when you open a viewpoint later.","title":"Camera View and Attached Elements"},{"location":"agile/manage-and-resolve-issues/#issue-fields","text":"Every issue has a number of issue fields associated with it, including title , description , type , status , priority , assignees , disciplines , zones , due date , etc. These issue fields are configurable. You can change available options based on project requirements. See Configure Issue Fields for more information.","title":"Issue Fields"},{"location":"agile/manage-and-resolve-issues/#create-issues-with-similar-settings","text":"Occasionally you might want to create issues consecutively with the same issue type, disciplines, zones, etc. Tick the Create another check box. Then you can create another issue with the same options selected.","title":"Create Issues with Similar Settings"},{"location":"agile/manage-and-resolve-issues/#view-issues-in-issue-list","text":"Go to the Issues page to view all issues in a table. You can turn on/off table columns from the toolbar.","title":"View Issues in Issue List"},{"location":"agile/manage-and-resolve-issues/#view-issues-on-kanban-board","text":"Go to the Board page to view all issues on a Kanban board. Every issue is represented in a card and categorised in different columns by issue statuses. You can change row grouping, column grouping, and display order from the toolbar. If you drag and drop an issue card into a different column or row, the issue fields will also change accordingly.","title":"View Issues on Kanban Board"},{"location":"agile/manage-and-resolve-issues/#view-issues-alongside-web-viewer","text":"Open a BIM model in bimU.io Agile's web viewer and click the Issues icon button on the right toolbar. All issues in the current channel will show up on an Issues panel. You can quickly open a saved viewpoint in the web viewer from an issue card. You must have an identical BIM model uploaded to bimU.io Agile in the first place.","title":"View Issues alongside Web Viewer"},{"location":"agile/manage-and-resolve-issues/#issue-filters","text":"You can find issues more quickly with certain conditions, i.e. an issue field has specific values. Issue filters are available on the Issues page, the Board page, and the Issues panel. Click the reset button to clear all filters.","title":"Issue Filters"},{"location":"agile/manage-and-resolve-issues/#view-and-update-issue-details","text":"Clicking an issue on either a table row or a card will open up a dialog that shows issue details. Every channel member can update issue fields and leave comments here. Click on the image to view markup and snapshot in its original size.","title":"View and Update Issue Details"},{"location":"agile/manage-and-resolve-issues/#open-viewpoint","text":"Saved viewpoint can be opened in supported BIM software or in bimU.io Agile's web viewer. Click the magnifier button and select where you want the viewpoint to be opened. The underlying principle is similar to BCF (BIM Collaboration Format) viewpoint . Before opening a viewpoint, you must also open the original BIM model file or an identical BIM model.","title":"Open Viewpoint"},{"location":"agile/manage-and-resolve-issues/#open-viewpoint-in-bim-software","text":"Again, make sure you have bimU.io Launcher installed and have supported BIM software opened. If the current viewpoint has attached elements, i.e. some elements were selected during issue creation, you can select and/or isolate attached elements to find them more easily in the active model view. A perspective viewpoint will be opened as a camera view in Autodesk Revit which is a bit clunky to navigate. Use orthographic view to create an issue if you're going to review it in Revit.","title":"Open Viewpoint in BIM Software"},{"location":"agile/manage-and-resolve-issues/#open-viewpoint-in-web-viewer","text":"If you have the Issues panel opened alongside the web viewer, simply click the magnifier button on an issue card to open viewpoint. If you have the web viewer opened in another browswer window, you can open viewpoint from the issue details dialog. This is particularly useful when you have multiple monitors. For example, you can use the Kanban board and the web viewer at the same time by putting them on different screens.","title":"Open Viewpoint in Web Viewer"},{"location":"agile/manage-and-resolve-issues/#move-issues-forward","text":"Every issue should be progressively closed out based on the sequence of issue statuses. You can find more information here . If you have issues grouped by status in board columns, it's the easiest way to move issues to the next status column by drag-and-drop. Alternatively, you can change issue status in the issue details dialog.","title":"Move Issues Forward"},{"location":"agile/manage-and-resolve-issues/#delete-issue","text":"You can delete issues that were created by youself. Only a channel admin has permission to delete every issue. To delete an issue, click the three dot button on the top right in the issue details dialog and select Delete .","title":"Delete Issue"},{"location":"agile/manage-channel-members/","text":"Manage Channel Members \u00b6 You are a channel admin by default when you create a new channel. Every team member added to the channel is a channel member. Managing channel mebmers properly allows you and your teams to work together more efficiently. View and Search Members \u00b6 Go to the Members page, every channel member can view and search member details. Add Members to Channel \u00b6 Only a channel admin can add members to a channel. Click the ADD MEMBER button on the Members page or look for the same option from plus icon button in the top menu bar. You can then send an invite to multiple email addresses. Join Channel \u00b6 When your team members receive the invite, they can join your channel from the unique link in the email. If your team members haven't used bimU.io Agile before, they will be prompted to create a bimU.io Agile account in the first place. Manage Sent Invites \u00b6 Click the MANAGE INVITES button on the Members page to view who you've sent invites to. If you change your mind, click the delete icon button to withdraw an invite. Member Roles and Permissions \u00b6 There are two channel roles with different permissions: Admin and Member . The default role for a new channel member is Member . You need to be an Admin to change a member's role on the Members page. Below is a list of permissions of what an Admin or a Member can do. Admin Member Update channel details V Change channel settings V View channel settings V V Archive channel V Delete channel V View channel members V V Add members to channel V Withdraw sent invites V View channel analytics V V Upload models V V View all models V V Update all models V Update own models V V Delete all models V Delete own models V V Create issue V V View all issues V V Update all issues V V Comment on all issues V V Update own comments V V Delete all comments V Delete own comments V V Delete all issues V Remove Member from Channel \u00b6 You need to be a channel admin to remove members. Click the cross button to remove a member from the current channel.","title":"Manage Channel Members"},{"location":"agile/manage-channel-members/#manage-channel-members","text":"You are a channel admin by default when you create a new channel. Every team member added to the channel is a channel member. Managing channel mebmers properly allows you and your teams to work together more efficiently.","title":"Manage Channel Members"},{"location":"agile/manage-channel-members/#view-and-search-members","text":"Go to the Members page, every channel member can view and search member details.","title":"View and Search Members"},{"location":"agile/manage-channel-members/#add-members-to-channel","text":"Only a channel admin can add members to a channel. Click the ADD MEMBER button on the Members page or look for the same option from plus icon button in the top menu bar. You can then send an invite to multiple email addresses.","title":"Add Members to Channel"},{"location":"agile/manage-channel-members/#join-channel","text":"When your team members receive the invite, they can join your channel from the unique link in the email. If your team members haven't used bimU.io Agile before, they will be prompted to create a bimU.io Agile account in the first place.","title":"Join Channel"},{"location":"agile/manage-channel-members/#manage-sent-invites","text":"Click the MANAGE INVITES button on the Members page to view who you've sent invites to. If you change your mind, click the delete icon button to withdraw an invite.","title":"Manage Sent Invites"},{"location":"agile/manage-channel-members/#member-roles-and-permissions","text":"There are two channel roles with different permissions: Admin and Member . The default role for a new channel member is Member . You need to be an Admin to change a member's role on the Members page. Below is a list of permissions of what an Admin or a Member can do. Admin Member Update channel details V Change channel settings V View channel settings V V Archive channel V Delete channel V View channel members V V Add members to channel V Withdraw sent invites V View channel analytics V V Upload models V V View all models V V Update all models V Update own models V V Delete all models V Delete own models V V Create issue V V View all issues V V Update all issues V V Comment on all issues V V Update own comments V V Delete all comments V Delete own comments V V Delete all issues V","title":"Member Roles and Permissions"},{"location":"agile/manage-channel-members/#remove-member-from-channel","text":"You need to be a channel admin to remove members. Click the cross button to remove a member from the current channel.","title":"Remove Member from Channel"},{"location":"agile/navigate-bim-models/","text":"Navigate BIM Models \u00b6 This section talks about how to upload, manage, and view BIM models. Upload Models \u00b6 Click the UPLOAD MODEL button on the left menu to open up the dialog. There are two ways to upload your BIM models: Upload from BIM Software: Uploading from a model view within BIM software gives you more control of how it looks like on bimU.io Agile. What You See Is What You Get (WYSIWYG). Make sure you have bimU.io Launcher installed before uploading a model. Upload IFC files: The industry standard IFC (Industry Foundation Classes) format is also supported. Most BIM modelling tools can export to an IFC file. You can then upload it to bimU.io Agile directly. Manage Models \u00b6 You can find all uploaded models on the Models page. Click the button in the Category column and select a colour to put a model into a different category. You can then use the filter to find your models more quickly. To rename or delete a model, you can find the options from the three dot menu. Use Web Viewer \u00b6 bimU.io Agile's 3D viewer is web-based, which means that it is cross-platform and can be used on any device as long as you have a WebGL-enabled browser installed. Use the latest version of Google Chrome to achieve the best performance. Click on a model filename or the magnifier button to enter the web viewer. There are a number of navigation tools in the horizontal toolbar. Basic Viewer Controls \u00b6 You can control the camera with the following tools to view the 3D scene from different perspectives. Orbit: The orbit tool allows you to rotate the camera around your model by using left mouse drag on desktop or one finger swipe on mobile devices. The camera will orbit around the centre of current selection or the previous zoom target. Pan: The pan tool allows you to move the camera vertically or horizontally by using mouse wheel drag or right mouse drag on desktop or two-finger scroll on mobile devices. Zoom: The zoom tool allows you to zoom in to focus on a specific area or zoom out to see more of your model by using mouse wheel scroll on desktop or two-finger pinch on mobile devices. The zoom speed will decrease gradually as the camera gets closer to the zoom target. Specfic Camera Viewpoints \u00b6 You can use the following tools to set camera viewpoint to specific areas you want to see. Fit to View: This tool fits the entire model into the current viewport. It is particularly useful when you get lost in the 3D scene. Zoom to Selection: This tool fits the selected elements into the current viewport to focus on them. You can use this tool if a target is too far or too close to zoom. Rotate View: This tool can view your model from all sides of the bounding box, including top, bottom, front, back, left, and right. Section Cut \u00b6 You can enable sectioning to slice your model to view more details inside. To disable sectioning, use the Reset Visibility tool. Section Box: This tool cuts model geometry by a rectangular box. The six edges of the section box can be adjusted using the grips. Section around Selection: This tool creates a section box around the selected elements. Then you can expand it to view the adjacent area. Model Elements \u00b6 Select Elements: Use left mouse click to select a model element. Shift + Left click to select multiple elements. Hide Elements: This tool hides the selected elements. You can use the Reset Visibility tool to unhide them. Other Viewer Capabilities \u00b6 Reset Visibility: This tool unhides all hidden elements and disables sectioning. Measuring Tool: A few different measurement tools are available, such as reporting coordinates, measuring distance, height, angle, area, etc. Toogle Fullscreen: This tool presents the entire viewport of the 3D viewer in browser's fullscreen mode. Toggle Camera Projection: This tool can switch the camera between perspective and orthographic projection. Data Panels \u00b6 There is also a vertical toolbar on the right-hand side where you can open the panels below to view relevant data. File Properties Panel: View file properties, such as model source, file size, timestamp, etc. Model Metadata Panel: View document-level metadata, such as project details, location, coordinate system, other BIM software specific metadata, etc. Element Properties Panel: View all properties of a selected element. A property can be a Revit Parameter , a Navisworks Property , a Tekla Attribute , or an IfcPropertySingleValue . Issues Panel: View all issues in the current channel. Search Elements Panel: Search model elements by a certain condition, e.g. find all elements having the same property value.","title":"Navigate BIM Models"},{"location":"agile/navigate-bim-models/#navigate-bim-models","text":"This section talks about how to upload, manage, and view BIM models.","title":"Navigate BIM Models"},{"location":"agile/navigate-bim-models/#upload-models","text":"Click the UPLOAD MODEL button on the left menu to open up the dialog. There are two ways to upload your BIM models: Upload from BIM Software: Uploading from a model view within BIM software gives you more control of how it looks like on bimU.io Agile. What You See Is What You Get (WYSIWYG). Make sure you have bimU.io Launcher installed before uploading a model. Upload IFC files: The industry standard IFC (Industry Foundation Classes) format is also supported. Most BIM modelling tools can export to an IFC file. You can then upload it to bimU.io Agile directly.","title":"Upload Models"},{"location":"agile/navigate-bim-models/#manage-models","text":"You can find all uploaded models on the Models page. Click the button in the Category column and select a colour to put a model into a different category. You can then use the filter to find your models more quickly. To rename or delete a model, you can find the options from the three dot menu.","title":"Manage Models"},{"location":"agile/navigate-bim-models/#use-web-viewer","text":"bimU.io Agile's 3D viewer is web-based, which means that it is cross-platform and can be used on any device as long as you have a WebGL-enabled browser installed. Use the latest version of Google Chrome to achieve the best performance. Click on a model filename or the magnifier button to enter the web viewer. There are a number of navigation tools in the horizontal toolbar.","title":"Use Web Viewer"},{"location":"agile/navigate-bim-models/#basic-viewer-controls","text":"You can control the camera with the following tools to view the 3D scene from different perspectives. Orbit: The orbit tool allows you to rotate the camera around your model by using left mouse drag on desktop or one finger swipe on mobile devices. The camera will orbit around the centre of current selection or the previous zoom target. Pan: The pan tool allows you to move the camera vertically or horizontally by using mouse wheel drag or right mouse drag on desktop or two-finger scroll on mobile devices. Zoom: The zoom tool allows you to zoom in to focus on a specific area or zoom out to see more of your model by using mouse wheel scroll on desktop or two-finger pinch on mobile devices. The zoom speed will decrease gradually as the camera gets closer to the zoom target.","title":"Basic Viewer Controls"},{"location":"agile/navigate-bim-models/#specfic-camera-viewpoints","text":"You can use the following tools to set camera viewpoint to specific areas you want to see. Fit to View: This tool fits the entire model into the current viewport. It is particularly useful when you get lost in the 3D scene. Zoom to Selection: This tool fits the selected elements into the current viewport to focus on them. You can use this tool if a target is too far or too close to zoom. Rotate View: This tool can view your model from all sides of the bounding box, including top, bottom, front, back, left, and right.","title":"Specfic Camera Viewpoints"},{"location":"agile/navigate-bim-models/#section-cut","text":"You can enable sectioning to slice your model to view more details inside. To disable sectioning, use the Reset Visibility tool. Section Box: This tool cuts model geometry by a rectangular box. The six edges of the section box can be adjusted using the grips. Section around Selection: This tool creates a section box around the selected elements. Then you can expand it to view the adjacent area.","title":"Section Cut"},{"location":"agile/navigate-bim-models/#model-elements","text":"Select Elements: Use left mouse click to select a model element. Shift + Left click to select multiple elements. Hide Elements: This tool hides the selected elements. You can use the Reset Visibility tool to unhide them.","title":"Model Elements"},{"location":"agile/navigate-bim-models/#other-viewer-capabilities","text":"Reset Visibility: This tool unhides all hidden elements and disables sectioning. Measuring Tool: A few different measurement tools are available, such as reporting coordinates, measuring distance, height, angle, area, etc. Toogle Fullscreen: This tool presents the entire viewport of the 3D viewer in browser's fullscreen mode. Toggle Camera Projection: This tool can switch the camera between perspective and orthographic projection.","title":"Other Viewer Capabilities"},{"location":"agile/navigate-bim-models/#data-panels","text":"There is also a vertical toolbar on the right-hand side where you can open the panels below to view relevant data. File Properties Panel: View file properties, such as model source, file size, timestamp, etc. Model Metadata Panel: View document-level metadata, such as project details, location, coordinate system, other BIM software specific metadata, etc. Element Properties Panel: View all properties of a selected element. A property can be a Revit Parameter , a Navisworks Property , a Tekla Attribute , or an IfcPropertySingleValue . Issues Panel: View all issues in the current channel. Search Elements Panel: Search model elements by a certain condition, e.g. find all elements having the same property value.","title":"Data Panels"},{"location":"agile/overview/","text":"bimU.io Agile Overview \u00b6 bimU.io Agile is a Cloud-based BIM issue tracking platform that aims to streamline the traditional design review process using the prominent Agile management methodology. Working in a team environment called Channel , BIM managers, drafters, designers, and engineers can work together to track down and close out design issues in BIM models. This gives project team better visibility to \"who is responsible for what and by when\". Issues can be assigned to project team members who can interrogate BIM models in preferred BIM software as well as using bimU.io's full-fledged online model viewer. With the cutting-edge Pluginless technology, users can instantly create markups and open saved viewpoints across multiple BIM environments to resolve issues iteratively for more effective multi-disciplinary coordination and communication. Log in to bimU.io Agile Agile BIM Issue Tracker \u00b6 BIM issues are captured within a centrally managed database and can be visualised on a Kanban board or in a task list. Every team member can view issue details, comment on issues, and move issues forward. Issue fields are fully configurable to suit project requirements. You can define project specific issue types, statuses, priorities, disciplines, zones, etc. Data-driven BIM Platform \u00b6 bimU.io Agile is built upon bimU.io's fully functional, high-performance web viewer that provides smooth user experience while navigating large-scale BIM models. Every BIM model uploaded to the bimU.io platform is backed by an underlying database that enables real-time BIM data query and data wrangling on the fly. \"Pluginless\" Integration \u00b6 bimU.io Agile works with most of the prevailing BIM authoring tools, including Autodesk Revit, Autodesk Navisworks, Trimble Tekla Structures, Solibri Model Checker, etc. You can upload models and create issues from supported BIM software and subsequently review them across multiple BIM environments without leaving bimU.io's browser user interface thanks to the cutting-edge Pluginess technology. Cloud-based Collaboration \u00b6 bimU.io Agile is fully managed and hosted in the Cloud. This opens the door to seamless integration with other Cloud-based project systems, such as Microsoft Teams, SharePoint, etc. Project issues and BIM models are stored in a secure Cloud environment and only accessible to authorised team members. Single Sign-On is enabled by default which requires your respective company or oransiational account to log in via Microsoft or Google identity systems. Project-based Pricing \u00b6 We fully understand the challenge of software procurement and expense recharge, especially when it comes to collaboration with external parties. bimU.io Agile is a SaaS (Software as a Service) offering that doesn't require IT infrastructure provision. Our project-based licencing model charges a flat rate per team environment (i.e. Channel) set up on bimU.io Agile rather than per-user. At the same price, you can add as many users as needed (including users in external organisations), upload unlimited BIM models, create unlimited issues, etc. No upfront cost. No tenancy management required. Video Podcast \u00b6 We are constantly adding short clips to the playlist below to demonstrate the functionality of bimU.io Agile. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates. User Support \u00b6 bimU.io Support Centre provides different types of help: FAQ: You can find a list of Frequently Asked Questions (FAQ) and answers. Community Forum: Participate in discussion and look for advice in our community forum. Service Desk: Please report a problem by logging a support ticket. Our customer service representatives will be in touch.","title":"bimU.io Agile Overview"},{"location":"agile/overview/#bimuio-agile-overview","text":"bimU.io Agile is a Cloud-based BIM issue tracking platform that aims to streamline the traditional design review process using the prominent Agile management methodology. Working in a team environment called Channel , BIM managers, drafters, designers, and engineers can work together to track down and close out design issues in BIM models. This gives project team better visibility to \"who is responsible for what and by when\". Issues can be assigned to project team members who can interrogate BIM models in preferred BIM software as well as using bimU.io's full-fledged online model viewer. With the cutting-edge Pluginless technology, users can instantly create markups and open saved viewpoints across multiple BIM environments to resolve issues iteratively for more effective multi-disciplinary coordination and communication. Log in to bimU.io Agile","title":"bimU.io Agile Overview"},{"location":"agile/overview/#agile-bim-issue-tracker","text":"BIM issues are captured within a centrally managed database and can be visualised on a Kanban board or in a task list. Every team member can view issue details, comment on issues, and move issues forward. Issue fields are fully configurable to suit project requirements. You can define project specific issue types, statuses, priorities, disciplines, zones, etc.","title":"Agile BIM Issue Tracker"},{"location":"agile/overview/#data-driven-bim-platform","text":"bimU.io Agile is built upon bimU.io's fully functional, high-performance web viewer that provides smooth user experience while navigating large-scale BIM models. Every BIM model uploaded to the bimU.io platform is backed by an underlying database that enables real-time BIM data query and data wrangling on the fly.","title":"Data-driven BIM Platform"},{"location":"agile/overview/#pluginless-integration","text":"bimU.io Agile works with most of the prevailing BIM authoring tools, including Autodesk Revit, Autodesk Navisworks, Trimble Tekla Structures, Solibri Model Checker, etc. You can upload models and create issues from supported BIM software and subsequently review them across multiple BIM environments without leaving bimU.io's browser user interface thanks to the cutting-edge Pluginess technology.","title":"\"Pluginless\" Integration"},{"location":"agile/overview/#cloud-based-collaboration","text":"bimU.io Agile is fully managed and hosted in the Cloud. This opens the door to seamless integration with other Cloud-based project systems, such as Microsoft Teams, SharePoint, etc. Project issues and BIM models are stored in a secure Cloud environment and only accessible to authorised team members. Single Sign-On is enabled by default which requires your respective company or oransiational account to log in via Microsoft or Google identity systems.","title":"Cloud-based Collaboration"},{"location":"agile/overview/#project-based-pricing","text":"We fully understand the challenge of software procurement and expense recharge, especially when it comes to collaboration with external parties. bimU.io Agile is a SaaS (Software as a Service) offering that doesn't require IT infrastructure provision. Our project-based licencing model charges a flat rate per team environment (i.e. Channel) set up on bimU.io Agile rather than per-user. At the same price, you can add as many users as needed (including users in external organisations), upload unlimited BIM models, create unlimited issues, etc. No upfront cost. No tenancy management required.","title":"Project-based Pricing"},{"location":"agile/overview/#video-podcast","text":"We are constantly adding short clips to the playlist below to demonstrate the functionality of bimU.io Agile. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates.","title":"Video Podcast"},{"location":"agile/overview/#user-support","text":"bimU.io Support Centre provides different types of help: FAQ: You can find a list of Frequently Asked Questions (FAQ) and answers. Community Forum: Participate in discussion and look for advice in our community forum. Service Desk: Please report a problem by logging a support ticket. Our customer service representatives will be in touch.","title":"User Support"},{"location":"agile/product-roadmap/","text":"bimU.io Agile Product Roadmap \u00b6 We\u2019re continuously developing new capabilities to enable your BIM-oriented, Cloud-powered, data-driven virtual design review. This page lists features that are planned to release in the near future. Please note that delivery timelines may change and planned functionality may not be released. 2021 Q4 \u00b6 Section box improvement Real-time notification for MS Teams, Slack, and WebHook Bulk import issues from BCF, Navisworks, Solibri Issue and model labelling/classification Import organisational members from Azure AD 2022 Q1 \u00b6 SharePoint/OneDrive integration Group model elements by property Search model elements by property Remember issue filters and board layout Issue activity log 2022 Q2 \u00b6 Model federation Model versioning Issue attachments Change profile picture Full text search","title":"Product Roadmap"},{"location":"agile/product-roadmap/#bimuio-agile-product-roadmap","text":"We\u2019re continuously developing new capabilities to enable your BIM-oriented, Cloud-powered, data-driven virtual design review. This page lists features that are planned to release in the near future. Please note that delivery timelines may change and planned functionality may not be released.","title":"bimU.io Agile Product Roadmap"},{"location":"agile/product-roadmap/#2021-q4","text":"Section box improvement Real-time notification for MS Teams, Slack, and WebHook Bulk import issues from BCF, Navisworks, Solibri Issue and model labelling/classification Import organisational members from Azure AD","title":"2021 Q4"},{"location":"agile/product-roadmap/#2022-q1","text":"SharePoint/OneDrive integration Group model elements by property Search model elements by property Remember issue filters and board layout Issue activity log","title":"2022 Q1"},{"location":"agile/product-roadmap/#2022-q2","text":"Model federation Model versioning Issue attachments Change profile picture Full text search","title":"2022 Q2"},{"location":"developer/api-reference/","text":"Classes \u00b6 Viewer \u21d0 THREE.EventDispatcher PropertyFilter PropertySelector AggregateFunctionsEnum CameraTypesEnum DataTypesEnum EventsEnum OperatorsEnum Typedefs \u00b6 ViewerConfiguration : Object Configuation object used to initialise bimU.io Viewer. Viewpoint : Object BCF-compatible viewpoint object. Camera : Object BCF-compatible camera object. ClippingPlane : Object BCF-compatible clipping plane object. XYZ : Object BCF-compatible XYZ object. TagOptions : Object Display options for Tag. Viewer \u21d0 THREE.EventDispatcher \u00b6 Kind : global class Extends : THREE.EventDispatcher Viewer \u21d0 THREE.EventDispatcher new Viewer(configs) .showDialog(title, body, closeButtonText, okButtonText, [okButtonCallback], [dismissible]) .closeDialog() .showHelp() .showElementInformation() .initialize() .setViewpoint(viewpointObject) .getViewpoint() \u21d2 Viewpoint .setSectionBox(min, max) .setSectionBoxMode(mode) .setProjectionMode(mode, value) .isPerspectiveMode() \u21d2 boolean .toggleSectionbox([isVisible]) .sectionAroundSelection() .anyElementSelected(showWarning) \u21d2 boolean .alignToView(viewOrientation) .zoomToFit() .zoomToSelection() .getBoundingBoxBySelection() \u21d2 THREE.Box3 .zoomToObject(object3D) .loadModel(modelConfigs, onProgress, onLoaded, onError) .unselectAllElements() .unhideAllElements() .resetVisibility() .setVisibility(elementIndices, isVisible, [invertOthers]) .hideSelectedElements() .isolateSelectedElements() .isPointInSectionBox(point) .clearAllColorOverrides() .getFileProperties(onSuccess, onError) .getModelMetadata(onSuccess, onError) .getElementDataByIndex(elementIndex, onSuccess, onError) .toggleFullscreen([isFullScreen]) .readCoordinates() .measureDistance() .measureHeight() .measureAngle() .measureArea() .clearAllMeasurements() .setColor(elementIndices, color) .setTexture(elementIndices, texture) .addObject(object3D) \u21d2 string .removeObject(objectId) .addTag(text, location, [options], [onClick]) \u21d2 string .removeTag(tagId) .getGeometry(elementIndex) \u21d2 THREE.BufferGeometry .getBoundingBox(elementIndices) \u21d2 THREE.Box3 .getLocation(elementIndex) \u21d2 THREE.Vector3 .getElementIndicesBySelection() \u21d2 Array.<number> .addCustomButton(domElementId, icon, color, tooltip, callback) .removeDomElement(domElementId) .setBackgroundColor(color) .toggleWireframeMode([isWireframe]) .getScreenshot(openInNewWindow) \u21d2 string .getElementDataByQuery(filterExpression, selectExpression, limit, onSuccess, onError) .getElementDataByProperty(propertyFilters, propertySelectors, limit, onSuccess, onError) .aggregateElementProperty(propertyFilters, propertyToAggregate, aggregateFunction, onSuccess, onError) .dispose() new Viewer(configs) \u00b6 bimU.io Viewer main application. You should always create an instance of Viewer by passing the ViewerConfiguration object into the constructor. Param Type Description configs ViewerConfiguration Viewer configuation object. See ViewerConfiguration . Example let viewerConfigs = { domElementId : \"viewer\" , THREE : null , showFPS : true , showUI : false }; let viewer = new bimU . Viewer ( viewerConfigs ); viewer.showDialog(title, body, closeButtonText, okButtonText, [okButtonCallback], [dismissible]) \u00b6 Displays a modal dialog with custom UI. Kind : instance method of Viewer Param Type Default Description title string Modal dialog title in plain text or HTML. body string Modal dialog body in plain text or HTML. closeButtonText string Display text of the Close button. Passing a null value will hide the button. okButtonText string Display text of the OK button. Passing a null value will hide the button. [okButtonCallback] function Callback function when the OK button is clicked. [dismissible] boolean true Allow modal to be dismissed by keyboard or overlay click. viewer.closeDialog() \u00b6 Closes custom modal dialog. Kind : instance method of Viewer viewer.showHelp() \u00b6 Displays user instructions in a modal dialog. Kind : instance method of Viewer viewer.showElementInformation() \u00b6 Displays selected element properties in a modal dialog. Kind : instance method of Viewer viewer.initialize() \u00b6 Initializes bimU.io Viewer. This function must be called before using any other functions. Kind : instance method of Viewer viewer.setViewpoint(viewpointObject) \u00b6 Sets camera viewpoint and clipping planes. Kind : instance method of Viewer See : BCF Documentation Param Type Description viewpointObject Viewpoint The BCF compatible viewpoint definition. See Viewpoint . viewer.getViewpoint() \u21d2 Viewpoint \u00b6 Gets camera viewpoint and clipping planes. Kind : instance method of Viewer Returns : Viewpoint - The BCF compatible viewpoint definition. See Viewpoint . See : BCF Documentation viewer.setSectionBox(min, max) \u00b6 Sets the section box orthogonally. Kind : instance method of Viewer Param Type Description min THREE.Vector3 Minimum coordinates (lower-left-rear corner of the box). max THREE.Vector3 Maximum coordinates (upper-right-front corner of the box). viewer.setSectionBoxMode(mode) \u00b6 Sets the transformation mode of the section box. Kind : instance method of Viewer Param Type Description mode string The current transformation mode. Possible values are \"custom\", \"translate\", \"rotate\", and \"scale\". Default is \"custom\". viewer.setProjectionMode(mode, value) \u00b6 Changes camera parameters directly. Kind : instance method of Viewer Param Type Description mode CameraTypesEnum Perspective camera or orthographic camera. value number Field of View or View to World Scale. viewer.isPerspectiveMode() \u21d2 boolean \u00b6 Checks camera type. Kind : instance method of Viewer Returns : boolean - Whether current camera is a perspective one. viewer.toggleSectionbox([isVisible]) \u00b6 Toggles section box visibility. Kind : instance method of Viewer Param Type Description [isVisible] boolean Use true to show the section box or false to hide it. It toggles the visibility if the parameter is not set. viewer.sectionAroundSelection() \u00b6 Creates a section box around current selection. Kind : instance method of Viewer viewer.anyElementSelected(showWarning) \u21d2 boolean \u00b6 Checks if there's any element selected. Kind : instance method of Viewer Returns : boolean - Whether at least one element selected. Param Type Description showWarning boolean Whether an event should be dispathed if there's no element selected. viewer.alignToView(viewOrientation) \u00b6 Aligns current camera to an orthogonal view. Kind : instance method of Viewer Param Type Description viewOrientation string Valid values: 'top', 'bottom', 'front', 'back', 'left', 'right'. viewer.zoomToFit() \u00b6 Zooms model extent to fit current viewport. Kind : instance method of Viewer viewer.zoomToSelection() \u00b6 Moves camera to focus on current selection. Kind : instance method of Viewer viewer.getBoundingBoxBySelection() \u21d2 THREE.Box3 \u00b6 Returns a bounding box of selected elements. Kind : instance method of Viewer Returns : THREE.Box3 - Represents an axis-aligned bounding box (AABB) in 3D space. viewer.zoomToObject(object3D) \u00b6 Moves camera to focus on a particular 3D object. Kind : instance method of Viewer Param Type Description object3D THREE.Object3D The base class for most objects in Three.js. viewer.loadModel(modelConfigs, onProgress, onLoaded, onError) \u00b6 Loads model from bimU.io server. Kind : instance method of Viewer Param Type Description modelConfigs object Model configuration object. onProgress function Callback when model is being downloaded. onLoaded function Callback when model is fully loaded. onError function Callback when an error occurs. viewer.unselectAllElements() \u00b6 Unselects all selected elements. Kind : instance method of Viewer viewer.unhideAllElements() \u00b6 Makes all hidden elements visible. Kind : instance method of Viewer viewer.resetVisibility() \u00b6 Unhides all elements and clears all section planes. Kind : instance method of Viewer viewer.setVisibility(elementIndices, isVisible, [invertOthers]) \u00b6 Makes elements hidden or visible. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. isVisible boolean True is visible. False is hidden. [invertOthers] boolean True to set all other elements inversely. Default is false. viewer.hideSelectedElements() \u00b6 Makes all selected elements invisible. Kind : instance method of Viewer viewer.isolateSelectedElements() \u00b6 Hides all unselected elements. Kind : instance method of Viewer viewer.isPointInSectionBox(point) \u00b6 Checks whether a 3D point is within the current section box. Kind : instance method of Viewer Param Type Description point THREE.Vector3 A 3D point. viewer.clearAllColorOverrides() \u00b6 Removes color overrides from all elements. Kind : instance method of Viewer viewer.getFileProperties(onSuccess, onError) \u00b6 Retrieves file properties from bimU.io server. Kind : instance method of Viewer Param Type Description onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.getModelMetadata(onSuccess, onError) \u00b6 Retrieves model metadata from bimU.io server. Kind : instance method of Viewer Param Type Description onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.getElementDataByIndex(elementIndex, onSuccess, onError) \u00b6 Retrieves model element data (Revit parameters, Navisworks properties, etc.) from bimU.io server. Kind : instance method of Viewer Param Type Description elementIndex number Element index. onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.toggleFullscreen([isFullScreen]) \u00b6 Activates or exits full screen mode. Kind : instance method of Viewer Param Type Description [isFullScreen] boolean Use true to activate full screen or false to exit. It toggles the full screen mode if the parameter is not set. viewer.readCoordinates() \u00b6 Starts user interaction to read XYZ coordinates. Kind : instance method of Viewer viewer.measureDistance() \u00b6 Starts user interaction to measure distance point by point. Kind : instance method of Viewer viewer.measureHeight() \u00b6 Starts user interaction to measure height by three points. Kind : instance method of Viewer viewer.measureAngle() \u00b6 Starts user interaction to measure angles by a triangle formed by three points. Kind : instance method of Viewer viewer.measureArea() \u00b6 Starts user interaction to measure area by a polygon. Kind : instance method of Viewer viewer.clearAllMeasurements() \u00b6 Removes all current measurements shown in the viewer. Kind : instance method of Viewer viewer.setColor(elementIndices, color) \u00b6 Overrides element color. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. color THREE.Color Three.js color object. viewer.setTexture(elementIndices, texture) \u00b6 WORK IN PROGRESS. Adds texture to elements. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. texture THREE.Texture Texture object. viewer.addObject(object3D) \u21d2 string \u00b6 Adds an arbitrary 3D object to the viewer. Kind : instance method of Viewer Returns : string - UUID of created Object3D. Param Type Description object3D THREE.Object3D Three.js Object3D object. viewer.removeObject(objectId) \u00b6 Removes an existing 3D object from the viewer. Kind : instance method of Viewer Param Type Description objectId string Three.js Object3D UUID. viewer.addTag(text, location, [options], [onClick]) \u21d2 string \u00b6 This method adds a 3D sprite to a particular location. Kind : instance method of Viewer Returns : string - UUID of created Object3D. Param Type Description text string Text to display in tag. location THREE.Vector3 3D point where tag is placed. [options] TagOptions Tag display options. [onClick] function Callback function when tag is clicked. viewer.removeTag(tagId) \u00b6 Removes an existing tag from the viewer. Kind : instance method of Viewer Param Type Description tagId string Three.js Object3D UUID. viewer.getGeometry(elementIndex) \u21d2 THREE.BufferGeometry \u00b6 Returns primitive geometry of a particular model element. Kind : instance method of Viewer Returns : THREE.BufferGeometry - Three.js BufferGeometry object. Param Type Description elementIndex number Element index. viewer.getBoundingBox(elementIndices) \u21d2 THREE.Box3 \u00b6 Returns the bounding box of particular model elements or the entire model if the parameter is not set. Kind : instance method of Viewer Returns : THREE.Box3 - Represents an axis-aligned bounding box (AABB) in 3D space. Param Type Description elementIndices number Element index. viewer.getLocation(elementIndex) \u21d2 THREE.Vector3 \u00b6 Returns the center point of a particular model element. Kind : instance method of Viewer Returns : THREE.Vector3 - Three.js Vector3 object. Param Type Description elementIndex number Element index. viewer.getElementIndicesBySelection() \u21d2 Array.<number> \u00b6 Returns indices of selected elements. Kind : instance method of Viewer Returns : Array.<number> - An array of element indices. viewer.addCustomButton(domElementId, icon, color, tooltip, callback) \u00b6 Creates a custom button on the user interface of the viewer. Kind : instance method of Viewer Param Type Description domElementId string DOM element id to use for this button. icon string Icon string. color string CSS color keyword, RGBA, or Hex code. tooltip string Short description. callback function A callback function when this button is clicked. viewer.removeDomElement(domElementId) \u00b6 Removes an existing DOM element by its ID. Kind : instance method of Viewer Param Type Description domElementId string DOM element id to remove. viewer.setBackgroundColor(color) \u00b6 Sets background color of the viewer canvas. Kind : instance method of Viewer Param Type Description color number Hexadecimal color. E.g., 0xff0000. viewer.toggleWireframeMode([isWireframe]) \u00b6 Turns on or off wireframe mode. Kind : instance method of Viewer Param Type Description [isWireframe] boolean Use true to show wireframe or false to hide it. It toggles the wireframe mode if the parameter is not set. viewer.getScreenshot(openInNewWindow) \u21d2 string \u00b6 Returns screenshot of the viewer canvas. Kind : instance method of Viewer Returns : string - A DOMString containing a data URI containing a representation of the screenshot. Param Type Description openInNewWindow boolean Whether opens screenshot in a new window/tab. viewer.getElementDataByQuery(filterExpression, selectExpression, limit, onSuccess, onError) \u00b6 Retrieves element data from bimU.io server based on a custom query expression. Kind : instance method of Viewer Param Type Description filterExpression string Filter expression string. selectExpression string Select expression string. limit number Limit on the number of elements returned. onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.getElementDataByProperty(propertyFilters, propertySelectors, limit, onSuccess, onError) \u00b6 Retrieves element data by predefined property filters and selectors. Kind : instance method of Viewer Param Type Description propertyFilters Array.<PropertyFilter> Array of property filters that look for elements satisfying specified conditions. propertySelectors Array.<PropertySelector> Array of property selectors. Maximum of 5 properties to return. limit number Limit on the number of elements returned. onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.aggregateElementProperty(propertyFilters, propertyToAggregate, aggregateFunction, onSuccess, onError) \u00b6 Retrieves element data by predefined property filters and selectors. Kind : instance method of Viewer Param Type Description propertyFilters Array.<PropertyFilter> Array of property filters. propertyToAggregate PropertySelector Single property selector that will be aggregated. aggregateFunction AggregateFunctionsEnum Limit on the number of elements returned. Default is COUNT. onSuccess function Callback when data is received. onError function Callback when an error occurs. viewer.dispose() \u00b6 Destroys this Viewer instance and releases all resources. Kind : instance method of Viewer PropertyFilter \u00b6 Kind : global class PropertyFilter new PropertyFilter(groupName, propertyName, propertyValue) .operator : OperatorsEnum .groupName : string .propertyName : string .propertyValue : string | Array.<string> | number | Array.<number> .getExpressionString() \u21d2 string new PropertyFilter(groupName, propertyName, propertyValue) \u00b6 This class is used to find elements by a property that satisfies the specified condition. It is similar to the SQL WHERE clause. Param Type Description groupName string Property group name. propertyName string Property name. propertyValue string Property value. Example // Filter out elements that have a property called \"Top Constrant\" in a \"Constraints\" group and its value is equal to \"Level 1\". let propertyFilter1 = new bimU . PropertyFilter ( \"Constraints\" , \"Top Constrant\" , \"Level 1\" ); // Filter out elements that have a property called \"Height\" in a \"Dimension\" group and its value is greater than 12.34. let propertyFilter2 = new bimU . PropertyFilter ( \"Dimension\" , \"Height\" , 12.34 ); // Default operator is EQUAL_TO. propertyFilter2 . operator = bimU . OperatorsEnum . GREATER_THAN ; propertyFilter.operator : OperatorsEnum \u00b6 An operator that determines how the property value is compared. Default is bimU.OperatorsEnum.EQUAL_TO. Kind : instance property of PropertyFilter propertyFilter.groupName : string \u00b6 Property group name Kind : instance property of PropertyFilter propertyFilter.propertyName : string \u00b6 Property name. Kind : instance property of PropertyFilter propertyFilter.propertyValue : string | Array.<string> | number | Array.<number> \u00b6 Property value. Use Array along with IN, NOT_IN, or BETWEEN operators. Kind : instance property of PropertyFilter propertyFilter.getExpressionString() \u21d2 string \u00b6 This method returns a SQL equivalent expression for the underlying filter. Kind : instance method of PropertyFilter Returns : string - SQL filter expression. PropertySelector \u00b6 Kind : global class PropertySelector new PropertySelector(groupName, propertyName) .dataType : DataTypesEnum .groupName : string .propertyName : string .alias : string .getExpressionString() \u21d2 string new PropertySelector(groupName, propertyName) \u00b6 This class is used to specify or restrict properties to return. It is similar to the SQL SELECT clause. Param Type Description groupName string Property group name. propertyName string Property name. Example // Return a property called \"Top Offset\" in a \"Constraints\" group. let propertySelector1 = new bimU . PropertySelector ( \"Constraints\" , \"Top Offset\" ); // Default data type is STRING. propertySelector1 . type = bimU . DataTypesEnum . FLOAT ; // Return a property called \"Mark\" in a \"Text\" group. let propertySelector2 = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Rename the property name to \"Wall Mark\" when data is returned. propertySelector2 . alias = \"Wall Mark\" ; propertySelector.dataType : DataTypesEnum \u00b6 Data type casting/conversion. Default is bimU.DataTypesEnum.STRING. Kind : instance property of PropertySelector propertySelector.groupName : string \u00b6 Property group name Kind : instance property of PropertySelector propertySelector.propertyName : string \u00b6 Property name. Kind : instance property of PropertySelector propertySelector.alias : string \u00b6 Alias for renaming the property name. It is similar to the SQL AS command. Default is the same as the property name. Kind : instance property of PropertySelector propertySelector.getExpressionString() \u21d2 string \u00b6 This method returns a SQL equivalent expression for the underlying selector. Kind : instance method of PropertySelector Returns : string - SQL select expression. AggregateFunctionsEnum \u00b6 Kind : global class Read only : true Properties Name Type Description AVG string Calculate the average value of a numeric property. COUNT string Get the number of matching elements. MAX string Get the largest value of a numeric property. MIN string Get the smallest value of a numeric property. SUM string Calculate the total sum of a numeric property. new AggregateFunctionsEnum() \u00b6 Enum for aggregate functions that perform a calculation on property values and return a single value. CameraTypesEnum \u00b6 Kind : global class Read only : true Properties Name Type Description PERSPECTIVE string Perspective projection. ORTHOGRAPHIC string Orthographic projection. new CameraTypesEnum() \u00b6 Enum for camera types. DataTypesEnum \u00b6 Kind : global class Read only : true Properties Name Type Description BOOLEAN string TRUE or FALSE. INTEGER string Signed integer. STRING string UTF8-encoded variable-length string. FLOAT string Floating point number. TIMESTAMP string W3C date and time formats. new DataTypesEnum() \u00b6 Enum for SQL compatible data types. EventsEnum \u00b6 Kind : global class Read only : true Properties Name Type Description ON_MODEL_LOADED string . ON_MODEL_PROGRESS string . ON_MODEL_ERROR string . ON_VIEWER_INITIALIZED string . ON_VIEWER_STATUS_CHANGED string . ON_VIEWER_ERROR string . ON_SELECTION_CHANGED string . ON_FULL_SCREEN_ENABLED string . ON_FULL_SCREEN_DISABLED string . FULL_SCREEN_UNSUPPORTED string . new EventsEnum() \u00b6 Enum for events. OperatorsEnum \u00b6 Kind : global class Read only : true Properties Name Type Description EQUAL_TO string Equal to a value. Can be text, number or null. NOT_EQUAL_TO string Not equal to a value. Can be text, number or null. IN string Matches any value in a list of values. Can be text or number. NOT_IN string Does not match any value in a list of values. Can be text or number. STARTS_WITH string Starts with a text string. DOES_NOT_START_WITH string Does not start with a text string. ENDS_WITH string Ends with a text string. DOES_NOT_END_WITH string Does not end with a text string. CONTAINS string Contains a text string. DOES_NOT_CONTAIN string Does not contain a text string. GREATER_THAN string Greater than a numeric value. GREATER_THAN_OR_EQUAL_TO string Greater than or equal to a numeric value. LESS_THAN string Less than a numeric value. LESS_THAN_OR_EQUAL_TO string Less than or equal to a numeric value. BETWEEN string Between two numeric values. new OperatorsEnum() \u00b6 Enum for comparison and pattern matching operators. ViewerConfiguration : Object \u00b6 Configuation object used to initialise bimU.io Viewer. Kind : global typedef Properties Name Type Description domElementId string DIV element ID showFPS boolean Whether show FPS meter. showUI boolean Whether show UI. buttonColor string CSS color keyword, RGBA, or Hex code for the default UI buttons. Viewpoint : Object \u00b6 BCF-compatible viewpoint object. Kind : global typedef Properties Name Type Description camera Camera Perspective camera or orthographic camera. clippingPlanes Array.<ClippingPlane> Clipping plane definition. originatingSystem string Where this viewpoint was created from. Camera : Object \u00b6 BCF-compatible camera object. Kind : global typedef Properties Name Type Description cameraViewPoint XYZ Camera location. cameraDirection XYZ Camera direction. cameraUpVector XYZ Camera up vector. fieldOfView number Camera\u2019s field of view angle in degrees. viewToWorldScale number Scaling from view to world. ClippingPlane : Object \u00b6 BCF-compatible clipping plane object. Kind : global typedef Properties Name Type Description normal XYZ The normal to the plane. constant number The negative distance from the origin to the plane along the normal vector. XYZ : Object \u00b6 BCF-compatible XYZ object. Kind : global typedef Properties Name Type Description x number X. y number Y. z number Z. TagOptions : Object \u00b6 Display options for Tag. Kind : global typedef Properties Name Type Default Description [shape] string \"'circle'\" Use 'cicle' or 'rectangular'. [fontName] string \"'Helvetica'\" Font name. See https://www.cssfontstack.com/ for more details. FontAwesome is also [fontSize] number 30 Font size in pixel values (px). [fontColor] string \"'rgba(255, 255, 255, 1)'\" CSS color keyword, RBGA, or Hex code for text. [backgroundColor] string \"'rgba(97, 232, 240, 1)'\" CSS color keyword, RGBA, or Hex code for background. [borderColor] string \"'rgba(0, 0, 0, 0)'\" CSS color keyword, RGBA, or Hex code for border. Default is no border (transparent). [borderThickness] number 0 Border thickness in pixel values (px). [visibleBehindObjects] boolean true Whether tag is still visible when behind other objects. [pulse] boolean false Whether tag has pulse effect.","title":"API Reference"},{"location":"developer/api-reference/#classes","text":"Viewer \u21d0 THREE.EventDispatcher PropertyFilter PropertySelector AggregateFunctionsEnum CameraTypesEnum DataTypesEnum EventsEnum OperatorsEnum","title":"Classes"},{"location":"developer/api-reference/#typedefs","text":"ViewerConfiguration : Object Configuation object used to initialise bimU.io Viewer. Viewpoint : Object BCF-compatible viewpoint object. Camera : Object BCF-compatible camera object. ClippingPlane : Object BCF-compatible clipping plane object. XYZ : Object BCF-compatible XYZ object. TagOptions : Object Display options for Tag.","title":"Typedefs"},{"location":"developer/api-reference/#viewer-threeeventdispatcher","text":"Kind : global class Extends : THREE.EventDispatcher Viewer \u21d0 THREE.EventDispatcher new Viewer(configs) .showDialog(title, body, closeButtonText, okButtonText, [okButtonCallback], [dismissible]) .closeDialog() .showHelp() .showElementInformation() .initialize() .setViewpoint(viewpointObject) .getViewpoint() \u21d2 Viewpoint .setSectionBox(min, max) .setSectionBoxMode(mode) .setProjectionMode(mode, value) .isPerspectiveMode() \u21d2 boolean .toggleSectionbox([isVisible]) .sectionAroundSelection() .anyElementSelected(showWarning) \u21d2 boolean .alignToView(viewOrientation) .zoomToFit() .zoomToSelection() .getBoundingBoxBySelection() \u21d2 THREE.Box3 .zoomToObject(object3D) .loadModel(modelConfigs, onProgress, onLoaded, onError) .unselectAllElements() .unhideAllElements() .resetVisibility() .setVisibility(elementIndices, isVisible, [invertOthers]) .hideSelectedElements() .isolateSelectedElements() .isPointInSectionBox(point) .clearAllColorOverrides() .getFileProperties(onSuccess, onError) .getModelMetadata(onSuccess, onError) .getElementDataByIndex(elementIndex, onSuccess, onError) .toggleFullscreen([isFullScreen]) .readCoordinates() .measureDistance() .measureHeight() .measureAngle() .measureArea() .clearAllMeasurements() .setColor(elementIndices, color) .setTexture(elementIndices, texture) .addObject(object3D) \u21d2 string .removeObject(objectId) .addTag(text, location, [options], [onClick]) \u21d2 string .removeTag(tagId) .getGeometry(elementIndex) \u21d2 THREE.BufferGeometry .getBoundingBox(elementIndices) \u21d2 THREE.Box3 .getLocation(elementIndex) \u21d2 THREE.Vector3 .getElementIndicesBySelection() \u21d2 Array.<number> .addCustomButton(domElementId, icon, color, tooltip, callback) .removeDomElement(domElementId) .setBackgroundColor(color) .toggleWireframeMode([isWireframe]) .getScreenshot(openInNewWindow) \u21d2 string .getElementDataByQuery(filterExpression, selectExpression, limit, onSuccess, onError) .getElementDataByProperty(propertyFilters, propertySelectors, limit, onSuccess, onError) .aggregateElementProperty(propertyFilters, propertyToAggregate, aggregateFunction, onSuccess, onError) .dispose()","title":"Viewer \u21d0 THREE.EventDispatcher"},{"location":"developer/api-reference/#new-viewerconfigs","text":"bimU.io Viewer main application. You should always create an instance of Viewer by passing the ViewerConfiguration object into the constructor. Param Type Description configs ViewerConfiguration Viewer configuation object. See ViewerConfiguration . Example let viewerConfigs = { domElementId : \"viewer\" , THREE : null , showFPS : true , showUI : false }; let viewer = new bimU . Viewer ( viewerConfigs );","title":"new Viewer(configs)"},{"location":"developer/api-reference/#viewershowdialogtitle-body-closebuttontext-okbuttontext-okbuttoncallback-dismissible","text":"Displays a modal dialog with custom UI. Kind : instance method of Viewer Param Type Default Description title string Modal dialog title in plain text or HTML. body string Modal dialog body in plain text or HTML. closeButtonText string Display text of the Close button. Passing a null value will hide the button. okButtonText string Display text of the OK button. Passing a null value will hide the button. [okButtonCallback] function Callback function when the OK button is clicked. [dismissible] boolean true Allow modal to be dismissed by keyboard or overlay click.","title":"viewer.showDialog(title, body, closeButtonText, okButtonText, [okButtonCallback], [dismissible])"},{"location":"developer/api-reference/#viewerclosedialog","text":"Closes custom modal dialog. Kind : instance method of Viewer","title":"viewer.closeDialog()"},{"location":"developer/api-reference/#viewershowhelp","text":"Displays user instructions in a modal dialog. Kind : instance method of Viewer","title":"viewer.showHelp()"},{"location":"developer/api-reference/#viewershowelementinformation","text":"Displays selected element properties in a modal dialog. Kind : instance method of Viewer","title":"viewer.showElementInformation()"},{"location":"developer/api-reference/#viewerinitialize","text":"Initializes bimU.io Viewer. This function must be called before using any other functions. Kind : instance method of Viewer","title":"viewer.initialize()"},{"location":"developer/api-reference/#viewersetviewpointviewpointobject","text":"Sets camera viewpoint and clipping planes. Kind : instance method of Viewer See : BCF Documentation Param Type Description viewpointObject Viewpoint The BCF compatible viewpoint definition. See Viewpoint .","title":"viewer.setViewpoint(viewpointObject)"},{"location":"developer/api-reference/#viewergetviewpoint-viewpoint","text":"Gets camera viewpoint and clipping planes. Kind : instance method of Viewer Returns : Viewpoint - The BCF compatible viewpoint definition. See Viewpoint . See : BCF Documentation","title":"viewer.getViewpoint() \u21d2 Viewpoint"},{"location":"developer/api-reference/#viewersetsectionboxmin-max","text":"Sets the section box orthogonally. Kind : instance method of Viewer Param Type Description min THREE.Vector3 Minimum coordinates (lower-left-rear corner of the box). max THREE.Vector3 Maximum coordinates (upper-right-front corner of the box).","title":"viewer.setSectionBox(min, max)"},{"location":"developer/api-reference/#viewersetsectionboxmodemode","text":"Sets the transformation mode of the section box. Kind : instance method of Viewer Param Type Description mode string The current transformation mode. Possible values are \"custom\", \"translate\", \"rotate\", and \"scale\". Default is \"custom\".","title":"viewer.setSectionBoxMode(mode)"},{"location":"developer/api-reference/#viewersetprojectionmodemode-value","text":"Changes camera parameters directly. Kind : instance method of Viewer Param Type Description mode CameraTypesEnum Perspective camera or orthographic camera. value number Field of View or View to World Scale.","title":"viewer.setProjectionMode(mode, value)"},{"location":"developer/api-reference/#viewerisperspectivemode-boolean","text":"Checks camera type. Kind : instance method of Viewer Returns : boolean - Whether current camera is a perspective one.","title":"viewer.isPerspectiveMode() \u21d2 boolean"},{"location":"developer/api-reference/#viewertogglesectionboxisvisible","text":"Toggles section box visibility. Kind : instance method of Viewer Param Type Description [isVisible] boolean Use true to show the section box or false to hide it. It toggles the visibility if the parameter is not set.","title":"viewer.toggleSectionbox([isVisible])"},{"location":"developer/api-reference/#viewersectionaroundselection","text":"Creates a section box around current selection. Kind : instance method of Viewer","title":"viewer.sectionAroundSelection()"},{"location":"developer/api-reference/#vieweranyelementselectedshowwarning-boolean","text":"Checks if there's any element selected. Kind : instance method of Viewer Returns : boolean - Whether at least one element selected. Param Type Description showWarning boolean Whether an event should be dispathed if there's no element selected.","title":"viewer.anyElementSelected(showWarning) \u21d2 boolean"},{"location":"developer/api-reference/#vieweraligntoviewvieworientation","text":"Aligns current camera to an orthogonal view. Kind : instance method of Viewer Param Type Description viewOrientation string Valid values: 'top', 'bottom', 'front', 'back', 'left', 'right'.","title":"viewer.alignToView(viewOrientation)"},{"location":"developer/api-reference/#viewerzoomtofit","text":"Zooms model extent to fit current viewport. Kind : instance method of Viewer","title":"viewer.zoomToFit()"},{"location":"developer/api-reference/#viewerzoomtoselection","text":"Moves camera to focus on current selection. Kind : instance method of Viewer","title":"viewer.zoomToSelection()"},{"location":"developer/api-reference/#viewergetboundingboxbyselection-threebox3","text":"Returns a bounding box of selected elements. Kind : instance method of Viewer Returns : THREE.Box3 - Represents an axis-aligned bounding box (AABB) in 3D space.","title":"viewer.getBoundingBoxBySelection() \u21d2 THREE.Box3"},{"location":"developer/api-reference/#viewerzoomtoobjectobject3d","text":"Moves camera to focus on a particular 3D object. Kind : instance method of Viewer Param Type Description object3D THREE.Object3D The base class for most objects in Three.js.","title":"viewer.zoomToObject(object3D)"},{"location":"developer/api-reference/#viewerloadmodelmodelconfigs-onprogress-onloaded-onerror","text":"Loads model from bimU.io server. Kind : instance method of Viewer Param Type Description modelConfigs object Model configuration object. onProgress function Callback when model is being downloaded. onLoaded function Callback when model is fully loaded. onError function Callback when an error occurs.","title":"viewer.loadModel(modelConfigs, onProgress, onLoaded, onError)"},{"location":"developer/api-reference/#viewerunselectallelements","text":"Unselects all selected elements. Kind : instance method of Viewer","title":"viewer.unselectAllElements()"},{"location":"developer/api-reference/#viewerunhideallelements","text":"Makes all hidden elements visible. Kind : instance method of Viewer","title":"viewer.unhideAllElements()"},{"location":"developer/api-reference/#viewerresetvisibility","text":"Unhides all elements and clears all section planes. Kind : instance method of Viewer","title":"viewer.resetVisibility()"},{"location":"developer/api-reference/#viewersetvisibilityelementindices-isvisible-invertothers","text":"Makes elements hidden or visible. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. isVisible boolean True is visible. False is hidden. [invertOthers] boolean True to set all other elements inversely. Default is false.","title":"viewer.setVisibility(elementIndices, isVisible, [invertOthers])"},{"location":"developer/api-reference/#viewerhideselectedelements","text":"Makes all selected elements invisible. Kind : instance method of Viewer","title":"viewer.hideSelectedElements()"},{"location":"developer/api-reference/#viewerisolateselectedelements","text":"Hides all unselected elements. Kind : instance method of Viewer","title":"viewer.isolateSelectedElements()"},{"location":"developer/api-reference/#viewerispointinsectionboxpoint","text":"Checks whether a 3D point is within the current section box. Kind : instance method of Viewer Param Type Description point THREE.Vector3 A 3D point.","title":"viewer.isPointInSectionBox(point)"},{"location":"developer/api-reference/#viewerclearallcoloroverrides","text":"Removes color overrides from all elements. Kind : instance method of Viewer","title":"viewer.clearAllColorOverrides()"},{"location":"developer/api-reference/#viewergetfilepropertiesonsuccess-onerror","text":"Retrieves file properties from bimU.io server. Kind : instance method of Viewer Param Type Description onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.getFileProperties(onSuccess, onError)"},{"location":"developer/api-reference/#viewergetmodelmetadataonsuccess-onerror","text":"Retrieves model metadata from bimU.io server. Kind : instance method of Viewer Param Type Description onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.getModelMetadata(onSuccess, onError)"},{"location":"developer/api-reference/#viewergetelementdatabyindexelementindex-onsuccess-onerror","text":"Retrieves model element data (Revit parameters, Navisworks properties, etc.) from bimU.io server. Kind : instance method of Viewer Param Type Description elementIndex number Element index. onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.getElementDataByIndex(elementIndex, onSuccess, onError)"},{"location":"developer/api-reference/#viewertogglefullscreenisfullscreen","text":"Activates or exits full screen mode. Kind : instance method of Viewer Param Type Description [isFullScreen] boolean Use true to activate full screen or false to exit. It toggles the full screen mode if the parameter is not set.","title":"viewer.toggleFullscreen([isFullScreen])"},{"location":"developer/api-reference/#viewerreadcoordinates","text":"Starts user interaction to read XYZ coordinates. Kind : instance method of Viewer","title":"viewer.readCoordinates()"},{"location":"developer/api-reference/#viewermeasuredistance","text":"Starts user interaction to measure distance point by point. Kind : instance method of Viewer","title":"viewer.measureDistance()"},{"location":"developer/api-reference/#viewermeasureheight","text":"Starts user interaction to measure height by three points. Kind : instance method of Viewer","title":"viewer.measureHeight()"},{"location":"developer/api-reference/#viewermeasureangle","text":"Starts user interaction to measure angles by a triangle formed by three points. Kind : instance method of Viewer","title":"viewer.measureAngle()"},{"location":"developer/api-reference/#viewermeasurearea","text":"Starts user interaction to measure area by a polygon. Kind : instance method of Viewer","title":"viewer.measureArea()"},{"location":"developer/api-reference/#viewerclearallmeasurements","text":"Removes all current measurements shown in the viewer. Kind : instance method of Viewer","title":"viewer.clearAllMeasurements()"},{"location":"developer/api-reference/#viewersetcolorelementindices-color","text":"Overrides element color. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. color THREE.Color Three.js color object.","title":"viewer.setColor(elementIndices, color)"},{"location":"developer/api-reference/#viewersettextureelementindices-texture","text":"WORK IN PROGRESS. Adds texture to elements. Kind : instance method of Viewer Param Type Description elementIndices Array.<number> An array of element indices. texture THREE.Texture Texture object.","title":"viewer.setTexture(elementIndices, texture)"},{"location":"developer/api-reference/#vieweraddobjectobject3d-string","text":"Adds an arbitrary 3D object to the viewer. Kind : instance method of Viewer Returns : string - UUID of created Object3D. Param Type Description object3D THREE.Object3D Three.js Object3D object.","title":"viewer.addObject(object3D) \u21d2 string"},{"location":"developer/api-reference/#viewerremoveobjectobjectid","text":"Removes an existing 3D object from the viewer. Kind : instance method of Viewer Param Type Description objectId string Three.js Object3D UUID.","title":"viewer.removeObject(objectId)"},{"location":"developer/api-reference/#vieweraddtagtext-location-options-onclick-string","text":"This method adds a 3D sprite to a particular location. Kind : instance method of Viewer Returns : string - UUID of created Object3D. Param Type Description text string Text to display in tag. location THREE.Vector3 3D point where tag is placed. [options] TagOptions Tag display options. [onClick] function Callback function when tag is clicked.","title":"viewer.addTag(text, location, [options], [onClick]) \u21d2 string"},{"location":"developer/api-reference/#viewerremovetagtagid","text":"Removes an existing tag from the viewer. Kind : instance method of Viewer Param Type Description tagId string Three.js Object3D UUID.","title":"viewer.removeTag(tagId)"},{"location":"developer/api-reference/#viewergetgeometryelementindex-threebuffergeometry","text":"Returns primitive geometry of a particular model element. Kind : instance method of Viewer Returns : THREE.BufferGeometry - Three.js BufferGeometry object. Param Type Description elementIndex number Element index.","title":"viewer.getGeometry(elementIndex) \u21d2 THREE.BufferGeometry"},{"location":"developer/api-reference/#viewergetboundingboxelementindices-threebox3","text":"Returns the bounding box of particular model elements or the entire model if the parameter is not set. Kind : instance method of Viewer Returns : THREE.Box3 - Represents an axis-aligned bounding box (AABB) in 3D space. Param Type Description elementIndices number Element index.","title":"viewer.getBoundingBox(elementIndices) \u21d2 THREE.Box3"},{"location":"developer/api-reference/#viewergetlocationelementindex-threevector3","text":"Returns the center point of a particular model element. Kind : instance method of Viewer Returns : THREE.Vector3 - Three.js Vector3 object. Param Type Description elementIndex number Element index.","title":"viewer.getLocation(elementIndex) \u21d2 THREE.Vector3"},{"location":"developer/api-reference/#viewergetelementindicesbyselection-arraynumber","text":"Returns indices of selected elements. Kind : instance method of Viewer Returns : Array.<number> - An array of element indices.","title":"viewer.getElementIndicesBySelection() \u21d2 Array.&lt;number&gt;"},{"location":"developer/api-reference/#vieweraddcustombuttondomelementid-icon-color-tooltip-callback","text":"Creates a custom button on the user interface of the viewer. Kind : instance method of Viewer Param Type Description domElementId string DOM element id to use for this button. icon string Icon string. color string CSS color keyword, RGBA, or Hex code. tooltip string Short description. callback function A callback function when this button is clicked.","title":"viewer.addCustomButton(domElementId, icon, color, tooltip, callback)"},{"location":"developer/api-reference/#viewerremovedomelementdomelementid","text":"Removes an existing DOM element by its ID. Kind : instance method of Viewer Param Type Description domElementId string DOM element id to remove.","title":"viewer.removeDomElement(domElementId)"},{"location":"developer/api-reference/#viewersetbackgroundcolorcolor","text":"Sets background color of the viewer canvas. Kind : instance method of Viewer Param Type Description color number Hexadecimal color. E.g., 0xff0000.","title":"viewer.setBackgroundColor(color)"},{"location":"developer/api-reference/#viewertogglewireframemodeiswireframe","text":"Turns on or off wireframe mode. Kind : instance method of Viewer Param Type Description [isWireframe] boolean Use true to show wireframe or false to hide it. It toggles the wireframe mode if the parameter is not set.","title":"viewer.toggleWireframeMode([isWireframe])"},{"location":"developer/api-reference/#viewergetscreenshotopeninnewwindow-string","text":"Returns screenshot of the viewer canvas. Kind : instance method of Viewer Returns : string - A DOMString containing a data URI containing a representation of the screenshot. Param Type Description openInNewWindow boolean Whether opens screenshot in a new window/tab.","title":"viewer.getScreenshot(openInNewWindow) \u21d2 string"},{"location":"developer/api-reference/#viewergetelementdatabyqueryfilterexpression-selectexpression-limit-onsuccess-onerror","text":"Retrieves element data from bimU.io server based on a custom query expression. Kind : instance method of Viewer Param Type Description filterExpression string Filter expression string. selectExpression string Select expression string. limit number Limit on the number of elements returned. onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.getElementDataByQuery(filterExpression, selectExpression, limit, onSuccess, onError)"},{"location":"developer/api-reference/#viewergetelementdatabypropertypropertyfilters-propertyselectors-limit-onsuccess-onerror","text":"Retrieves element data by predefined property filters and selectors. Kind : instance method of Viewer Param Type Description propertyFilters Array.<PropertyFilter> Array of property filters that look for elements satisfying specified conditions. propertySelectors Array.<PropertySelector> Array of property selectors. Maximum of 5 properties to return. limit number Limit on the number of elements returned. onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.getElementDataByProperty(propertyFilters, propertySelectors, limit, onSuccess, onError)"},{"location":"developer/api-reference/#vieweraggregateelementpropertypropertyfilters-propertytoaggregate-aggregatefunction-onsuccess-onerror","text":"Retrieves element data by predefined property filters and selectors. Kind : instance method of Viewer Param Type Description propertyFilters Array.<PropertyFilter> Array of property filters. propertyToAggregate PropertySelector Single property selector that will be aggregated. aggregateFunction AggregateFunctionsEnum Limit on the number of elements returned. Default is COUNT. onSuccess function Callback when data is received. onError function Callback when an error occurs.","title":"viewer.aggregateElementProperty(propertyFilters, propertyToAggregate, aggregateFunction, onSuccess, onError)"},{"location":"developer/api-reference/#viewerdispose","text":"Destroys this Viewer instance and releases all resources. Kind : instance method of Viewer","title":"viewer.dispose()"},{"location":"developer/api-reference/#propertyfilter","text":"Kind : global class PropertyFilter new PropertyFilter(groupName, propertyName, propertyValue) .operator : OperatorsEnum .groupName : string .propertyName : string .propertyValue : string | Array.<string> | number | Array.<number> .getExpressionString() \u21d2 string","title":"PropertyFilter"},{"location":"developer/api-reference/#new-propertyfiltergroupname-propertyname-propertyvalue","text":"This class is used to find elements by a property that satisfies the specified condition. It is similar to the SQL WHERE clause. Param Type Description groupName string Property group name. propertyName string Property name. propertyValue string Property value. Example // Filter out elements that have a property called \"Top Constrant\" in a \"Constraints\" group and its value is equal to \"Level 1\". let propertyFilter1 = new bimU . PropertyFilter ( \"Constraints\" , \"Top Constrant\" , \"Level 1\" ); // Filter out elements that have a property called \"Height\" in a \"Dimension\" group and its value is greater than 12.34. let propertyFilter2 = new bimU . PropertyFilter ( \"Dimension\" , \"Height\" , 12.34 ); // Default operator is EQUAL_TO. propertyFilter2 . operator = bimU . OperatorsEnum . GREATER_THAN ;","title":"new PropertyFilter(groupName, propertyName, propertyValue)"},{"location":"developer/api-reference/#propertyfilteroperator-operatorsenum","text":"An operator that determines how the property value is compared. Default is bimU.OperatorsEnum.EQUAL_TO. Kind : instance property of PropertyFilter","title":"propertyFilter.operator : OperatorsEnum"},{"location":"developer/api-reference/#propertyfiltergroupname-string","text":"Property group name Kind : instance property of PropertyFilter","title":"propertyFilter.groupName : string"},{"location":"developer/api-reference/#propertyfilterpropertyname-string","text":"Property name. Kind : instance property of PropertyFilter","title":"propertyFilter.propertyName : string"},{"location":"developer/api-reference/#propertyfilterpropertyvalue-string-arraystring-number-arraynumber","text":"Property value. Use Array along with IN, NOT_IN, or BETWEEN operators. Kind : instance property of PropertyFilter","title":"propertyFilter.propertyValue : string | Array.&lt;string&gt; | number | Array.&lt;number&gt;"},{"location":"developer/api-reference/#propertyfiltergetexpressionstring-string","text":"This method returns a SQL equivalent expression for the underlying filter. Kind : instance method of PropertyFilter Returns : string - SQL filter expression.","title":"propertyFilter.getExpressionString() \u21d2 string"},{"location":"developer/api-reference/#propertyselector","text":"Kind : global class PropertySelector new PropertySelector(groupName, propertyName) .dataType : DataTypesEnum .groupName : string .propertyName : string .alias : string .getExpressionString() \u21d2 string","title":"PropertySelector"},{"location":"developer/api-reference/#new-propertyselectorgroupname-propertyname","text":"This class is used to specify or restrict properties to return. It is similar to the SQL SELECT clause. Param Type Description groupName string Property group name. propertyName string Property name. Example // Return a property called \"Top Offset\" in a \"Constraints\" group. let propertySelector1 = new bimU . PropertySelector ( \"Constraints\" , \"Top Offset\" ); // Default data type is STRING. propertySelector1 . type = bimU . DataTypesEnum . FLOAT ; // Return a property called \"Mark\" in a \"Text\" group. let propertySelector2 = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Rename the property name to \"Wall Mark\" when data is returned. propertySelector2 . alias = \"Wall Mark\" ;","title":"new PropertySelector(groupName, propertyName)"},{"location":"developer/api-reference/#propertyselectordatatype-datatypesenum","text":"Data type casting/conversion. Default is bimU.DataTypesEnum.STRING. Kind : instance property of PropertySelector","title":"propertySelector.dataType : DataTypesEnum"},{"location":"developer/api-reference/#propertyselectorgroupname-string","text":"Property group name Kind : instance property of PropertySelector","title":"propertySelector.groupName : string"},{"location":"developer/api-reference/#propertyselectorpropertyname-string","text":"Property name. Kind : instance property of PropertySelector","title":"propertySelector.propertyName : string"},{"location":"developer/api-reference/#propertyselectoralias-string","text":"Alias for renaming the property name. It is similar to the SQL AS command. Default is the same as the property name. Kind : instance property of PropertySelector","title":"propertySelector.alias : string"},{"location":"developer/api-reference/#propertyselectorgetexpressionstring-string","text":"This method returns a SQL equivalent expression for the underlying selector. Kind : instance method of PropertySelector Returns : string - SQL select expression.","title":"propertySelector.getExpressionString() \u21d2 string"},{"location":"developer/api-reference/#aggregatefunctionsenum","text":"Kind : global class Read only : true Properties Name Type Description AVG string Calculate the average value of a numeric property. COUNT string Get the number of matching elements. MAX string Get the largest value of a numeric property. MIN string Get the smallest value of a numeric property. SUM string Calculate the total sum of a numeric property.","title":"AggregateFunctionsEnum"},{"location":"developer/api-reference/#new-aggregatefunctionsenum","text":"Enum for aggregate functions that perform a calculation on property values and return a single value.","title":"new AggregateFunctionsEnum()"},{"location":"developer/api-reference/#cameratypesenum","text":"Kind : global class Read only : true Properties Name Type Description PERSPECTIVE string Perspective projection. ORTHOGRAPHIC string Orthographic projection.","title":"CameraTypesEnum"},{"location":"developer/api-reference/#new-cameratypesenum","text":"Enum for camera types.","title":"new CameraTypesEnum()"},{"location":"developer/api-reference/#datatypesenum","text":"Kind : global class Read only : true Properties Name Type Description BOOLEAN string TRUE or FALSE. INTEGER string Signed integer. STRING string UTF8-encoded variable-length string. FLOAT string Floating point number. TIMESTAMP string W3C date and time formats.","title":"DataTypesEnum"},{"location":"developer/api-reference/#new-datatypesenum","text":"Enum for SQL compatible data types.","title":"new DataTypesEnum()"},{"location":"developer/api-reference/#eventsenum","text":"Kind : global class Read only : true Properties Name Type Description ON_MODEL_LOADED string . ON_MODEL_PROGRESS string . ON_MODEL_ERROR string . ON_VIEWER_INITIALIZED string . ON_VIEWER_STATUS_CHANGED string . ON_VIEWER_ERROR string . ON_SELECTION_CHANGED string . ON_FULL_SCREEN_ENABLED string . ON_FULL_SCREEN_DISABLED string . FULL_SCREEN_UNSUPPORTED string .","title":"EventsEnum"},{"location":"developer/api-reference/#new-eventsenum","text":"Enum for events.","title":"new EventsEnum()"},{"location":"developer/api-reference/#operatorsenum","text":"Kind : global class Read only : true Properties Name Type Description EQUAL_TO string Equal to a value. Can be text, number or null. NOT_EQUAL_TO string Not equal to a value. Can be text, number or null. IN string Matches any value in a list of values. Can be text or number. NOT_IN string Does not match any value in a list of values. Can be text or number. STARTS_WITH string Starts with a text string. DOES_NOT_START_WITH string Does not start with a text string. ENDS_WITH string Ends with a text string. DOES_NOT_END_WITH string Does not end with a text string. CONTAINS string Contains a text string. DOES_NOT_CONTAIN string Does not contain a text string. GREATER_THAN string Greater than a numeric value. GREATER_THAN_OR_EQUAL_TO string Greater than or equal to a numeric value. LESS_THAN string Less than a numeric value. LESS_THAN_OR_EQUAL_TO string Less than or equal to a numeric value. BETWEEN string Between two numeric values.","title":"OperatorsEnum"},{"location":"developer/api-reference/#new-operatorsenum","text":"Enum for comparison and pattern matching operators.","title":"new OperatorsEnum()"},{"location":"developer/api-reference/#viewerconfiguration-object","text":"Configuation object used to initialise bimU.io Viewer. Kind : global typedef Properties Name Type Description domElementId string DIV element ID showFPS boolean Whether show FPS meter. showUI boolean Whether show UI. buttonColor string CSS color keyword, RGBA, or Hex code for the default UI buttons.","title":"ViewerConfiguration : Object"},{"location":"developer/api-reference/#viewpoint-object","text":"BCF-compatible viewpoint object. Kind : global typedef Properties Name Type Description camera Camera Perspective camera or orthographic camera. clippingPlanes Array.<ClippingPlane> Clipping plane definition. originatingSystem string Where this viewpoint was created from.","title":"Viewpoint : Object"},{"location":"developer/api-reference/#camera-object","text":"BCF-compatible camera object. Kind : global typedef Properties Name Type Description cameraViewPoint XYZ Camera location. cameraDirection XYZ Camera direction. cameraUpVector XYZ Camera up vector. fieldOfView number Camera\u2019s field of view angle in degrees. viewToWorldScale number Scaling from view to world.","title":"Camera : Object"},{"location":"developer/api-reference/#clippingplane-object","text":"BCF-compatible clipping plane object. Kind : global typedef Properties Name Type Description normal XYZ The normal to the plane. constant number The negative distance from the origin to the plane along the normal vector.","title":"ClippingPlane : Object"},{"location":"developer/api-reference/#xyz-object","text":"BCF-compatible XYZ object. Kind : global typedef Properties Name Type Description x number X. y number Y. z number Z.","title":"XYZ : Object"},{"location":"developer/api-reference/#tagoptions-object","text":"Display options for Tag. Kind : global typedef Properties Name Type Default Description [shape] string \"'circle'\" Use 'cicle' or 'rectangular'. [fontName] string \"'Helvetica'\" Font name. See https://www.cssfontstack.com/ for more details. FontAwesome is also [fontSize] number 30 Font size in pixel values (px). [fontColor] string \"'rgba(255, 255, 255, 1)'\" CSS color keyword, RBGA, or Hex code for text. [backgroundColor] string \"'rgba(97, 232, 240, 1)'\" CSS color keyword, RGBA, or Hex code for background. [borderColor] string \"'rgba(0, 0, 0, 0)'\" CSS color keyword, RGBA, or Hex code for border. Default is no border (transparent). [borderThickness] number 0 Border thickness in pixel values (px). [visibleBehindObjects] boolean true Whether tag is still visible when behind other objects. [pulse] boolean false Whether tag has pulse effect.","title":"TagOptions : Object"},{"location":"developer/authentication/","text":"Authentication \u00b6 Access Token \u00b6 bimU.io Viewer API uses token-based authentication that is secure, reliable, and compliant with the prevailing JWT mechanism. A one-time access token must be generated to load a model or retrieve information from the bimU.io platform. The generated access token is valid for two hours only. There are two ways to generate an access token: API key or model password . Using model password is easier. However, it is recommended to use API key that is a more robust and flexible approach. Using API Key \u00b6 Every bimU.io user has a corresponding account name and can generate an API key which is unique to the bimU.io account. You can find your account name and generate an API key on bimU.io by going to Settings => API Key . All your models are programmatically accessible by a generated API key even though they are not shared explicitly. Therefore, please bear in mind the following best practices: Use environmental variables rather than putting your account name and API key directly in code. Never check in an API key to your source code repositories. Do not use an API key in a front-end web application. Do not share an API key with others. Revoke an API key in case of any security risk. A back-end, server-side web application should be set up to use an API key to request for an access token. You need to put together your account name (as user ID) and API key (as password) for the HTTP Basic Authentication. An HTTP request can then be sent to the REST API endpoint below. Note that only HTTPS is supported. HTTP Request for Access Token POST /rest/api/v1/token HTTP/1.1 Host: viewer.bimu.io Authorization: Basic xxxxxxxxxxx Sample Response { \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJpYX......\" } A couple of server-side code examples are provided below if you use Node.js (JavaScript) or .NET Core (C#) for the back-end web application. Node.js Request Example let request = require ( 'request' ); let accountName = \"YOUR_ACCOUNT_NAME\" ; let apiKey = \"YOUR_API_KEY\" ; let base64Encoded = Buffer . from ( ` ${ accountName } ':' ${ apiKey } ` ). toString ( 'base64' ); let options = { 'method' : 'POST' , 'url' : 'https://viewer.bimu.io/rest/api/v1/token' , 'headers' : { 'Authorization' : `Basic ${ base64Encoded } ` } }; request ( options , function ( error , response ) { if ( error ) throw new Error ( error ); let accessToken = JSON . parse ( response . body ). token ; console . log ( accessToken ); }); C# RestSharp Example using RestSharp ; using RestSharp.Serialization.Json ; using System ; using System.Text ; namespace ConsoleApp { class Program { static void Main ( string [] args ) { var accountName = \"YOUR_ACCOUNT_NAME\" ; var apiKey = \"YOUR_API_KEY\" ; var client = new RestClient ( \"https://viewer.bimu.io/rest/api/v1/token\" ); var request = new RestRequest ( Method . POST ); Byte [] bytesEncoded = Encoding . UTF8 . GetBytes ( $ \"{accountName}:{apiKey}\" ); string base64Encoded = Convert . ToBase64String ( bytesEncoded ); request . AddHeader ( \"Authorization\" , $ \"Basic {base64Encoded}\" ); IRestResponse response = client . Execute ( request ); var accessTokenResponse = new JsonDeserializer (). Deserialize < AccessTokenResponse >( response ); Console . WriteLine ( accessTokenResponse . token ); } } class AccessTokenResponse { public string token { get ; set ; } } } Once an access token is received like the sample response above, you can pass it on to a front-end web application for the model configuration object. An example below shows how to load a model by an access token. // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , accessToken : \"ACCESS_TOKEN\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); Using Model Password \u00b6 If working with a back-end web application is a challenge, then using model password is your best bet. A model password is specific to a model file. You must explicitly share a model on bimU.io to make it accessible by bimU.io Viewer API. If you don't set a password upon sharing, the password property of the model configuration object can be set to null or an empty string. If a model password is specified in the model configuration object like below, the loadModel function will handle access token request behind the scene and load the model directly. Please do not hard code your password in a front-end web application unless it is hosted in a fully trusted environment, such as intranet. // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : \"YOUR_MODEL_PASSWORD\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); Ideally, you should create your own user interface and prompt your users to input a password. bimU.io Viewer API has got a helper function called showDialog that comes in quite handy. See an example below. let onSubmit = () => { viewer . closeDialog (); let password = document . getElementById ( \"password-input\" ). value ; let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : password }; viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); }; let modalTitle = \"Protected Content\" ; let modalBody = ` <div>Input password</div> <div style=\"margin-top: 15px;\"> <input style=\"padding: 10px;border: 1px solid #ccc;border-radius: 4px;\" placeholder=\"Enter your password here\" id=\"password-input\" type=\"password\" class=\"validate\"> </div> ` ; viewer . showDialog ( modalTitle , modalBody , null , \"OK\" , onSubmit , false );","title":"Authentication"},{"location":"developer/authentication/#authentication","text":"","title":"Authentication"},{"location":"developer/authentication/#access-token","text":"bimU.io Viewer API uses token-based authentication that is secure, reliable, and compliant with the prevailing JWT mechanism. A one-time access token must be generated to load a model or retrieve information from the bimU.io platform. The generated access token is valid for two hours only. There are two ways to generate an access token: API key or model password . Using model password is easier. However, it is recommended to use API key that is a more robust and flexible approach.","title":"Access Token"},{"location":"developer/authentication/#using-api-key","text":"Every bimU.io user has a corresponding account name and can generate an API key which is unique to the bimU.io account. You can find your account name and generate an API key on bimU.io by going to Settings => API Key . All your models are programmatically accessible by a generated API key even though they are not shared explicitly. Therefore, please bear in mind the following best practices: Use environmental variables rather than putting your account name and API key directly in code. Never check in an API key to your source code repositories. Do not use an API key in a front-end web application. Do not share an API key with others. Revoke an API key in case of any security risk. A back-end, server-side web application should be set up to use an API key to request for an access token. You need to put together your account name (as user ID) and API key (as password) for the HTTP Basic Authentication. An HTTP request can then be sent to the REST API endpoint below. Note that only HTTPS is supported. HTTP Request for Access Token POST /rest/api/v1/token HTTP/1.1 Host: viewer.bimu.io Authorization: Basic xxxxxxxxxxx Sample Response { \"token\" : \"eyJhbGciOiJIUzI1NiJ9.eyJpYX......\" } A couple of server-side code examples are provided below if you use Node.js (JavaScript) or .NET Core (C#) for the back-end web application. Node.js Request Example let request = require ( 'request' ); let accountName = \"YOUR_ACCOUNT_NAME\" ; let apiKey = \"YOUR_API_KEY\" ; let base64Encoded = Buffer . from ( ` ${ accountName } ':' ${ apiKey } ` ). toString ( 'base64' ); let options = { 'method' : 'POST' , 'url' : 'https://viewer.bimu.io/rest/api/v1/token' , 'headers' : { 'Authorization' : `Basic ${ base64Encoded } ` } }; request ( options , function ( error , response ) { if ( error ) throw new Error ( error ); let accessToken = JSON . parse ( response . body ). token ; console . log ( accessToken ); }); C# RestSharp Example using RestSharp ; using RestSharp.Serialization.Json ; using System ; using System.Text ; namespace ConsoleApp { class Program { static void Main ( string [] args ) { var accountName = \"YOUR_ACCOUNT_NAME\" ; var apiKey = \"YOUR_API_KEY\" ; var client = new RestClient ( \"https://viewer.bimu.io/rest/api/v1/token\" ); var request = new RestRequest ( Method . POST ); Byte [] bytesEncoded = Encoding . UTF8 . GetBytes ( $ \"{accountName}:{apiKey}\" ); string base64Encoded = Convert . ToBase64String ( bytesEncoded ); request . AddHeader ( \"Authorization\" , $ \"Basic {base64Encoded}\" ); IRestResponse response = client . Execute ( request ); var accessTokenResponse = new JsonDeserializer (). Deserialize < AccessTokenResponse >( response ); Console . WriteLine ( accessTokenResponse . token ); } } class AccessTokenResponse { public string token { get ; set ; } } } Once an access token is received like the sample response above, you can pass it on to a front-end web application for the model configuration object. An example below shows how to load a model by an access token. // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , accessToken : \"ACCESS_TOKEN\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError );","title":"Using API Key"},{"location":"developer/authentication/#using-model-password","text":"If working with a back-end web application is a challenge, then using model password is your best bet. A model password is specific to a model file. You must explicitly share a model on bimU.io to make it accessible by bimU.io Viewer API. If you don't set a password upon sharing, the password property of the model configuration object can be set to null or an empty string. If a model password is specified in the model configuration object like below, the loadModel function will handle access token request behind the scene and load the model directly. Please do not hard code your password in a front-end web application unless it is hosted in a fully trusted environment, such as intranet. // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : \"YOUR_MODEL_PASSWORD\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); Ideally, you should create your own user interface and prompt your users to input a password. bimU.io Viewer API has got a helper function called showDialog that comes in quite handy. See an example below. let onSubmit = () => { viewer . closeDialog (); let password = document . getElementById ( \"password-input\" ). value ; let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : password }; viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); }; let modalTitle = \"Protected Content\" ; let modalBody = ` <div>Input password</div> <div style=\"margin-top: 15px;\"> <input style=\"padding: 10px;border: 1px solid #ccc;border-radius: 4px;\" placeholder=\"Enter your password here\" id=\"password-input\" type=\"password\" class=\"validate\"> </div> ` ; viewer . showDialog ( modalTitle , modalBody , null , \"OK\" , onSubmit , false );","title":"Using Model Password"},{"location":"developer/bim-database/","text":"BIM Database \u00b6 bimU.io is not only a BIM model viewer but also a full-fledged, cloud-hosted database where BIM data is readily available. Once a BIM model is uploaded to bimU.io and processed succesfully, every element property can be individually retrieved, filtered, transformed, aggregated upon a SQL-compliant query. Make sure a model is fully loaded in the viewer component before requesting for data or sending a database query. The ON_MODEL_LOADED event can be of use. Model Metadata \u00b6 There are two model-level data functions: getFileProperties and getModelMetadata . The former returns bimU.io's system properties of a model file, such as author, timestamp, source, etc. The latter returns model-level information contained in a BIM model, such as parameters in Revit Project Information. const onSuccess = ( data ) => console . log ( data ); const onError = ( errorMessage ) => console . error ( errorMessage ); viewer . getFileProperties ( onSuccess , onError ); viewer . getModelMetadata ( onSuccess , onError ); Element Data \u00b6 The getElementDataByIndex function returns all element properties for a specified element index. Every element property has a property group that categorises relevant properties. Below example shows how to get properties for a selected model element. viewer . addEventListener ( bimU . EventsEnum . ON_SELECTION_CHANGED , ( e ) => { console . log ( e ); //{ // clickedElementIndex: 2, // isClickedElementSelected: true, // selectedElementIndices: [0, 1, 2], // type: \"onSelectionChanged\" //} if ( e . isClickedElementSelected ){ viewer . getElementDataByIndex ( e . clickedElementIndex , onSuccess , onError ); } }); Database Query \u00b6 Filtering and Projection \u00b6 It is vitally important to narrow down search conditions in order to build an efficient query. A couple of wrapper classes come into play for filtering and projecting existing properties of model elements. A PropertyFilter object filters out model elements that match the specified condition. Various operators are available in the OperatorsEnum that can be assigned to a property filer. Additionally, as it is too cumbersome to retrieve all the properties in one go, a PropertySelector must be used to return only the specified property. In essence, a property filer limits the number of model elements returned, while a property selector limits the number of element properties returned. A comprehensive example is provided below. let groupName1 = \"Constraints\" ; let groupName2 = \"Dimension\" ; let propertyName1 = \"Top Constrant\" ; let propertyName2 = \"Height\" ; // Filter out elements that have a property called \"Top Constrant\" in a \"Constraints\" group and its value starts with \"Typical-Floor-\". let propertyFilter1 = new bimU . PropertyFilter ( groupName1 , propertyName1 , \"Typical-Floor-\" ); // Default operator is EQUAL_TO. propertyFilter1 . operator = bimU . OperatorsEnum . STARTS_WITH ; // Filter out elements that have a property called \"Height\" in a \"Dimension\" group and its value is greater than 12.34. let propertyFilter2 = new bimU . PropertyFilter ( groupName2 , propertyName2 , 12.34 ); propertyFilter2 . operator = bimU . OperatorsEnum . GREATER_THAN ; // Return a property called \"Top Offset\" in a \"Constraints\" group. let propertySelector1 = new bimU . PropertySelector ( groupName1 , \"Top Offset\" ); // Convert STRING to FLOAT. Default data type is STRING. propertySelector1 . dataType = bimU . DataTypesEnum . FLOAT ; // Return a property called \"Mark\" in a \"Text\" group. let propertySelector2 = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Rename the property name to \"Wall Mark\" when data is returned. propertySelector2 . alias = \"Wall Mark\" ; A corresponding SQL query should look like this: SELECT \"Constraints:Top Offset\" , \"Text:Mark\" as \"Wall Mark\" FROM ( bimU Cloud BIM Database ) WHERE \"Constraints:Top Constrant\" LIKE \"Typical-Floor-%\" AND \"Dimension:Height\" > 12 . 34 LIMIT 100 Query Builder \u00b6 When property filters and property selectors are created, they should then be put together in two separate arrays to build a query. Call the getElementDataByProperty function to execute a query like below. // Properties to search. All conditions must satisfy (AND - intersection). let propertyFilters = [ propertyFilter1 , propertyFilter2 ]; // Properties to return. Up to 5 properties can be returned. let propertySelectors = [ propertySelector1 , propertySelector2 ]; // Return only the first 100 model elements that match the conditions. let limit = 100 ; viewer . getElementDataByProperty ( propertyFilters , propertySelectors , limit , onSuccess , onError ); Model Element Identifiers \u00b6 As mentioned here , bimU.io uses element index as model element identifier internally. In addition to that, bimU.io also stores other identifiers sourced from authoring formats. Every identifier has a corresponding property name stored in the BIM database as well: eIdx : bimU.io's internal element index. uId : Unique ID, such as IFC's IfcGuid , Revit's UniqueId , Navisworks' InstanceGuid , and Tekla's Identifier.GUID . eId : Element ID, such as Revit's ElementId and Tekla's Identifier.ID . To use identifiers in a database query, simply leave group name blank or null : // Look for element index equals to \"0\" let propertyFilter1 = new bimU . PropertyFilter ( null , \"eIdx\" , \"0\" ); // Return unique ID let propertySelector1 = new bimU . PropertySelector ( \"\" , \"uId\" ); // Return element ID as integer and rename it to \"ElementId\" let selectExpression = `CAST(\"eId\" AS INTEGER) as \"ElementId\"` ; Raw Query \u00b6 It is possible to create a very complicated query. That said, writing an arbitrary query from scratch is only recommended for advanced users. If you have good knowledge in SQL, you can write a Filter expressesion along with a Select expression to run the getElementDataByQuery function like below. // \"Text:Mark\" is \"W-001-A\" for example. Here we want to extract the three numbers in between. let selectExpression = `CAST(\"Constraints:Top Offset\" AS FLOAT), SUBSTRING(\"Text:Mark\", 2, 3) as \"Wall Mark\"` ; let filterExpression = `\"Constraints:Top Constrant\" LIKE 'Typical-Floor-%' AND CAST(\"Dimension:Height\" AS FLOAT) > 59.78` ; viewer . getElementDataByQuery ( filterExpression , selectExpression , limit , onSuccess , onError ); Some useful tips for writing a query: Column name is composed of a group name and a property name with a colon : as a delimiter in between. Column name should be wrapped in double quotes \" . String value should be wrapped in single quotes ' . To avoid using escape characters, JavaScript Template Literal ` is the best way to create an expression string. Note that all input data is treated as a string. It must be cast into the relevant data types when necessary. Aggregation \u00b6 Aggregation query is also supported. To calculate a quantity or create a metric, call the aggregateElementProperty function to summarise values of a single element property. For example, to get the average \"Top Offset\" value of the model elements matching the filtering conditions: // Aggregate functions: avg, sum, count, max, min, etc... let func = bimU . AggregateFunctionsEnum . AVG ; viewer . aggregateElementProperty ( propertyFilters , propertySelector1 , func , onSuccess , onError ); Limitation \u00b6 Number of Properties: Maximum of 5 properties can be returned in one single query. Query Timeout: 2 seconds. HTTP response status code 408 if it takes too long. Query Data Size: 1 MB. HTTP response status code 413 if response payload is too large. Supported Data Types: bool, int, integer, string, float, decimal, numeric, timestamp. Supported Operators: Logical Operators AND, NOT, OR Comparison Operators <, >, <=, >=, =, <>, !=, BETWEEN, IN Pattern Matching Operators LIKE, _, % Unitary Operators IS NULL, IS NOT NULL Math Operators +, -, *, /, % Supported Functions: Conversion Functions CAST Conditional Functions CASE, COALESCE, NULLIF Date Functions DATE_ADD, DATE_DIFF, EXTRACT, TO_STRING, TO_TIMESTAMP, UTCNOW String Functions CHAR_LENGTH, CHARACTER_LENGTH, LOWER, SUBSTRING, TRIM, UPPER Aggregate Functions AVG, COUNT, MIN, MAX, SUM","title":"BIM Database"},{"location":"developer/bim-database/#bim-database","text":"bimU.io is not only a BIM model viewer but also a full-fledged, cloud-hosted database where BIM data is readily available. Once a BIM model is uploaded to bimU.io and processed succesfully, every element property can be individually retrieved, filtered, transformed, aggregated upon a SQL-compliant query. Make sure a model is fully loaded in the viewer component before requesting for data or sending a database query. The ON_MODEL_LOADED event can be of use.","title":"BIM Database"},{"location":"developer/bim-database/#model-metadata","text":"There are two model-level data functions: getFileProperties and getModelMetadata . The former returns bimU.io's system properties of a model file, such as author, timestamp, source, etc. The latter returns model-level information contained in a BIM model, such as parameters in Revit Project Information. const onSuccess = ( data ) => console . log ( data ); const onError = ( errorMessage ) => console . error ( errorMessage ); viewer . getFileProperties ( onSuccess , onError ); viewer . getModelMetadata ( onSuccess , onError );","title":"Model Metadata"},{"location":"developer/bim-database/#element-data","text":"The getElementDataByIndex function returns all element properties for a specified element index. Every element property has a property group that categorises relevant properties. Below example shows how to get properties for a selected model element. viewer . addEventListener ( bimU . EventsEnum . ON_SELECTION_CHANGED , ( e ) => { console . log ( e ); //{ // clickedElementIndex: 2, // isClickedElementSelected: true, // selectedElementIndices: [0, 1, 2], // type: \"onSelectionChanged\" //} if ( e . isClickedElementSelected ){ viewer . getElementDataByIndex ( e . clickedElementIndex , onSuccess , onError ); } });","title":"Element Data"},{"location":"developer/bim-database/#database-query","text":"","title":"Database Query"},{"location":"developer/bim-database/#filtering-and-projection","text":"It is vitally important to narrow down search conditions in order to build an efficient query. A couple of wrapper classes come into play for filtering and projecting existing properties of model elements. A PropertyFilter object filters out model elements that match the specified condition. Various operators are available in the OperatorsEnum that can be assigned to a property filer. Additionally, as it is too cumbersome to retrieve all the properties in one go, a PropertySelector must be used to return only the specified property. In essence, a property filer limits the number of model elements returned, while a property selector limits the number of element properties returned. A comprehensive example is provided below. let groupName1 = \"Constraints\" ; let groupName2 = \"Dimension\" ; let propertyName1 = \"Top Constrant\" ; let propertyName2 = \"Height\" ; // Filter out elements that have a property called \"Top Constrant\" in a \"Constraints\" group and its value starts with \"Typical-Floor-\". let propertyFilter1 = new bimU . PropertyFilter ( groupName1 , propertyName1 , \"Typical-Floor-\" ); // Default operator is EQUAL_TO. propertyFilter1 . operator = bimU . OperatorsEnum . STARTS_WITH ; // Filter out elements that have a property called \"Height\" in a \"Dimension\" group and its value is greater than 12.34. let propertyFilter2 = new bimU . PropertyFilter ( groupName2 , propertyName2 , 12.34 ); propertyFilter2 . operator = bimU . OperatorsEnum . GREATER_THAN ; // Return a property called \"Top Offset\" in a \"Constraints\" group. let propertySelector1 = new bimU . PropertySelector ( groupName1 , \"Top Offset\" ); // Convert STRING to FLOAT. Default data type is STRING. propertySelector1 . dataType = bimU . DataTypesEnum . FLOAT ; // Return a property called \"Mark\" in a \"Text\" group. let propertySelector2 = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Rename the property name to \"Wall Mark\" when data is returned. propertySelector2 . alias = \"Wall Mark\" ; A corresponding SQL query should look like this: SELECT \"Constraints:Top Offset\" , \"Text:Mark\" as \"Wall Mark\" FROM ( bimU Cloud BIM Database ) WHERE \"Constraints:Top Constrant\" LIKE \"Typical-Floor-%\" AND \"Dimension:Height\" > 12 . 34 LIMIT 100","title":"Filtering and Projection"},{"location":"developer/bim-database/#query-builder","text":"When property filters and property selectors are created, they should then be put together in two separate arrays to build a query. Call the getElementDataByProperty function to execute a query like below. // Properties to search. All conditions must satisfy (AND - intersection). let propertyFilters = [ propertyFilter1 , propertyFilter2 ]; // Properties to return. Up to 5 properties can be returned. let propertySelectors = [ propertySelector1 , propertySelector2 ]; // Return only the first 100 model elements that match the conditions. let limit = 100 ; viewer . getElementDataByProperty ( propertyFilters , propertySelectors , limit , onSuccess , onError );","title":"Query Builder"},{"location":"developer/bim-database/#model-element-identifiers","text":"As mentioned here , bimU.io uses element index as model element identifier internally. In addition to that, bimU.io also stores other identifiers sourced from authoring formats. Every identifier has a corresponding property name stored in the BIM database as well: eIdx : bimU.io's internal element index. uId : Unique ID, such as IFC's IfcGuid , Revit's UniqueId , Navisworks' InstanceGuid , and Tekla's Identifier.GUID . eId : Element ID, such as Revit's ElementId and Tekla's Identifier.ID . To use identifiers in a database query, simply leave group name blank or null : // Look for element index equals to \"0\" let propertyFilter1 = new bimU . PropertyFilter ( null , \"eIdx\" , \"0\" ); // Return unique ID let propertySelector1 = new bimU . PropertySelector ( \"\" , \"uId\" ); // Return element ID as integer and rename it to \"ElementId\" let selectExpression = `CAST(\"eId\" AS INTEGER) as \"ElementId\"` ;","title":"Model Element Identifiers"},{"location":"developer/bim-database/#raw-query","text":"It is possible to create a very complicated query. That said, writing an arbitrary query from scratch is only recommended for advanced users. If you have good knowledge in SQL, you can write a Filter expressesion along with a Select expression to run the getElementDataByQuery function like below. // \"Text:Mark\" is \"W-001-A\" for example. Here we want to extract the three numbers in between. let selectExpression = `CAST(\"Constraints:Top Offset\" AS FLOAT), SUBSTRING(\"Text:Mark\", 2, 3) as \"Wall Mark\"` ; let filterExpression = `\"Constraints:Top Constrant\" LIKE 'Typical-Floor-%' AND CAST(\"Dimension:Height\" AS FLOAT) > 59.78` ; viewer . getElementDataByQuery ( filterExpression , selectExpression , limit , onSuccess , onError ); Some useful tips for writing a query: Column name is composed of a group name and a property name with a colon : as a delimiter in between. Column name should be wrapped in double quotes \" . String value should be wrapped in single quotes ' . To avoid using escape characters, JavaScript Template Literal ` is the best way to create an expression string. Note that all input data is treated as a string. It must be cast into the relevant data types when necessary.","title":"Raw Query"},{"location":"developer/bim-database/#aggregation","text":"Aggregation query is also supported. To calculate a quantity or create a metric, call the aggregateElementProperty function to summarise values of a single element property. For example, to get the average \"Top Offset\" value of the model elements matching the filtering conditions: // Aggregate functions: avg, sum, count, max, min, etc... let func = bimU . AggregateFunctionsEnum . AVG ; viewer . aggregateElementProperty ( propertyFilters , propertySelector1 , func , onSuccess , onError );","title":"Aggregation"},{"location":"developer/bim-database/#limitation","text":"Number of Properties: Maximum of 5 properties can be returned in one single query. Query Timeout: 2 seconds. HTTP response status code 408 if it takes too long. Query Data Size: 1 MB. HTTP response status code 413 if response payload is too large. Supported Data Types: bool, int, integer, string, float, decimal, numeric, timestamp. Supported Operators: Logical Operators AND, NOT, OR Comparison Operators <, >, <=, >=, =, <>, !=, BETWEEN, IN Pattern Matching Operators LIKE, _, % Unitary Operators IS NULL, IS NOT NULL Math Operators +, -, *, /, % Supported Functions: Conversion Functions CAST Conditional Functions CASE, COALESCE, NULLIF Date Functions DATE_ADD, DATE_DIFF, EXTRACT, TO_STRING, TO_TIMESTAMP, UTCNOW String Functions CHAR_LENGTH, CHARACTER_LENGTH, LOWER, SUBSTRING, TRIM, UPPER Aggregate Functions AVG, COUNT, MIN, MAX, SUM","title":"Limitation"},{"location":"developer/custom-visualisation/","text":"Custom Visualisation \u00b6 Tagging \u00b6 A tag is an overlay marker or label that identifies a location in 3D scene. You can use it to create annotations for a model. The addTag function returns a UUID that can be used to remove a tag from the viewer later on. // Create a tag showing a number 1. let uuid = viewer . addTag ( \"1\" , new THREE . Vector3 ( 0 , 0 , 0 )); // Remove a tag by its UUID viewer . removeTag ( uuid ); There are various different options to configure how a tag looks like: // Available tag options let tagOptions = { shape : 'circle' , fontName : 'Helvetica' , fontSize : 20 , fontColor : { r : 160 , g : 32 , b : 21 , a : 1.0 }, backgroundColor : { r : 97 , g : 232 , b : 240 , a : 1.0 }, borderColor : { r : 160 , g : 32 , b : 21 , a : 1.0 }, borderThickness : 5 , visibleBehindObjects : true , pulse : true , }; viewer . addTag ( \"A\" , new THREE . Vector3 ( 0 , 0 , 0 ), tagOptions ); // Default viewer . addTag ( \"B\" , new THREE . Vector3 ( 0 , 0 , 0 )); // Circle viewer . addTag ( \"C\" , new THREE . Vector3 ( 0 , 0 , 3 ), { shape : 'rectangular' }); // Font viewer . addTag ( \"D\" , new THREE . Vector3 ( 1.5 , 0 , 0 ), { fontName : 'Times New Roman' , fontSize : 200 , fontColor : { r : 244 , g : 255 , b : 129 , a : 1.0 }}); // Border viewer . addTag ( \"E\" , new THREE . Vector3 ( 1.5 , 0 , 3 ), { borderThickness : 30 , borderColor : { r : 244 , g : 255 , b : 129 , a : 1.0 }}); // Background viewer . addTag ( \"F\" , new THREE . Vector3 ( 1.5 , 0 , 1.5 ), { backgroundColor : { r : 230 , g : 81 , b : 0 , a : 1.0 }}); // Empty Text viewer . addTag ( \" \" , new THREE . Vector3 ( 3 , 0 , 0 ), { fontSize : 100 }); // Long Text viewer . addTag ( \"Hello World\" , new THREE . Vector3 ( 3 , 0 , 3 ), { shape : 'rectangular' }); Custom Object \u00b6 Any Three.js Object3D object can be added to the viewer via the addObject function. You can take advantage of the existing loaders provided by Three.js Examples to import a generic 3D object, such as furniture, analytical model, etc. The zoomToObject function is able to nagivate user to where a 3D object is placed. To remove a 3D object from the viwer, simply pass its UUID to the removeObject function. See an example below. // Create a cylinder object let geometry = new THREE . CylinderGeometry ( 5 , 5 , 20 , 32 ); let material = new THREE . MeshBasicMaterial ({ color : 0xffff00 }); let cylinder = new THREE . Mesh ( geometry , material ); // Move to somewhere visible cylinder . position . set ( 10 , 20 , 30 ); // Keep the returned UUID let uuid = viewer . addObject ( cylinder ); // Then it can be removed later viewer . removeObject ( uuid );","title":"Custom Visualisation"},{"location":"developer/custom-visualisation/#custom-visualisation","text":"","title":"Custom Visualisation"},{"location":"developer/custom-visualisation/#tagging","text":"A tag is an overlay marker or label that identifies a location in 3D scene. You can use it to create annotations for a model. The addTag function returns a UUID that can be used to remove a tag from the viewer later on. // Create a tag showing a number 1. let uuid = viewer . addTag ( \"1\" , new THREE . Vector3 ( 0 , 0 , 0 )); // Remove a tag by its UUID viewer . removeTag ( uuid ); There are various different options to configure how a tag looks like: // Available tag options let tagOptions = { shape : 'circle' , fontName : 'Helvetica' , fontSize : 20 , fontColor : { r : 160 , g : 32 , b : 21 , a : 1.0 }, backgroundColor : { r : 97 , g : 232 , b : 240 , a : 1.0 }, borderColor : { r : 160 , g : 32 , b : 21 , a : 1.0 }, borderThickness : 5 , visibleBehindObjects : true , pulse : true , }; viewer . addTag ( \"A\" , new THREE . Vector3 ( 0 , 0 , 0 ), tagOptions ); // Default viewer . addTag ( \"B\" , new THREE . Vector3 ( 0 , 0 , 0 )); // Circle viewer . addTag ( \"C\" , new THREE . Vector3 ( 0 , 0 , 3 ), { shape : 'rectangular' }); // Font viewer . addTag ( \"D\" , new THREE . Vector3 ( 1.5 , 0 , 0 ), { fontName : 'Times New Roman' , fontSize : 200 , fontColor : { r : 244 , g : 255 , b : 129 , a : 1.0 }}); // Border viewer . addTag ( \"E\" , new THREE . Vector3 ( 1.5 , 0 , 3 ), { borderThickness : 30 , borderColor : { r : 244 , g : 255 , b : 129 , a : 1.0 }}); // Background viewer . addTag ( \"F\" , new THREE . Vector3 ( 1.5 , 0 , 1.5 ), { backgroundColor : { r : 230 , g : 81 , b : 0 , a : 1.0 }}); // Empty Text viewer . addTag ( \" \" , new THREE . Vector3 ( 3 , 0 , 0 ), { fontSize : 100 }); // Long Text viewer . addTag ( \"Hello World\" , new THREE . Vector3 ( 3 , 0 , 3 ), { shape : 'rectangular' });","title":"Tagging"},{"location":"developer/custom-visualisation/#custom-object","text":"Any Three.js Object3D object can be added to the viewer via the addObject function. You can take advantage of the existing loaders provided by Three.js Examples to import a generic 3D object, such as furniture, analytical model, etc. The zoomToObject function is able to nagivate user to where a 3D object is placed. To remove a 3D object from the viwer, simply pass its UUID to the removeObject function. See an example below. // Create a cylinder object let geometry = new THREE . CylinderGeometry ( 5 , 5 , 20 , 32 ); let material = new THREE . MeshBasicMaterial ({ color : 0xffff00 }); let cylinder = new THREE . Mesh ( geometry , material ); // Move to somewhere visible cylinder . position . set ( 10 , 20 , 30 ); // Keep the returned UUID let uuid = viewer . addObject ( cylinder ); // Then it can be removed later viewer . removeObject ( uuid );","title":"Custom Object"},{"location":"developer/event-handling/","text":"Event Handling \u00b6 Event Types \u00b6 You can subscribe to a particular event when it is triggered by bimU.io Viewer API or user behaviours. For example, a subscription to the ON_MODEL_PROGRESS event reports model loading progress. An animated progress bar can then be displayed on your user interface within an event handler function. All available events can be found under the bimU.EventsEnum object. Event Subscription \u00b6 bimU.io Viewer API takes advantage of the EventDispatcher supported by Three.js. addEventListener is a method of the Viewer class. Below is an example showing how to subscribe to the ON_VIEWER_INITIALIZED event by passing an event type and an event handler into the addEventListener function. const onLoaded = ( e ) => console . log ( e ); viewer . addEventListener ( bimU . EventsEnum . ON_VIEWER_INITIALIZED , onLoaded ); For some events, an event handler won't work if subscription is done after it happens. For example, you must subscribe to the ON_VIEWER_INITIALIZED event and the ON_MODEL_PROGRESS event prior to calling the initialize function and the loadModel function respectively. Some API functions, such as those fetching data from the bimU.io server, must be called after a specific event is finished. For example, you can only send a BIM database query when a model is fully loaded. The ON_MODEL_LOADED event is particularly helpful in this case. Event Handler and Event Argument \u00b6 An event handler is simply a callback function that takes an event argument. All information related to an event can be found from the properties of the event argument object. The best way to inspect an event arugment is logging it out. Below is an example responding to a UI event when a model element is clicked by user. Clicking on a model element can either select or deselect it. If it is selected, a further action can be taken in the callback function. viewer . addEventListener ( bimU . EventsEnum . ON_SELECTION_CHANGED , ( e ) => { console . log ( e ); //{ // clickedElementIndex: 2, // isClickedElementSelected: true, // selectedElementIndices: [0, 1, 2], // type: \"onSelectionChanged\" //} if ( e . isClickedElementSelected ){ viewer . getElementDataByIndex ( e . clickedElementIndex , onSuccess , onError ); } });","title":"Event Handling"},{"location":"developer/event-handling/#event-handling","text":"","title":"Event Handling"},{"location":"developer/event-handling/#event-types","text":"You can subscribe to a particular event when it is triggered by bimU.io Viewer API or user behaviours. For example, a subscription to the ON_MODEL_PROGRESS event reports model loading progress. An animated progress bar can then be displayed on your user interface within an event handler function. All available events can be found under the bimU.EventsEnum object.","title":"Event Types"},{"location":"developer/event-handling/#event-subscription","text":"bimU.io Viewer API takes advantage of the EventDispatcher supported by Three.js. addEventListener is a method of the Viewer class. Below is an example showing how to subscribe to the ON_VIEWER_INITIALIZED event by passing an event type and an event handler into the addEventListener function. const onLoaded = ( e ) => console . log ( e ); viewer . addEventListener ( bimU . EventsEnum . ON_VIEWER_INITIALIZED , onLoaded ); For some events, an event handler won't work if subscription is done after it happens. For example, you must subscribe to the ON_VIEWER_INITIALIZED event and the ON_MODEL_PROGRESS event prior to calling the initialize function and the loadModel function respectively. Some API functions, such as those fetching data from the bimU.io server, must be called after a specific event is finished. For example, you can only send a BIM database query when a model is fully loaded. The ON_MODEL_LOADED event is particularly helpful in this case.","title":"Event Subscription"},{"location":"developer/event-handling/#event-handler-and-event-argument","text":"An event handler is simply a callback function that takes an event argument. All information related to an event can be found from the properties of the event argument object. The best way to inspect an event arugment is logging it out. Below is an example responding to a UI event when a model element is clicked by user. Clicking on a model element can either select or deselect it. If it is selected, a further action can be taken in the callback function. viewer . addEventListener ( bimU . EventsEnum . ON_SELECTION_CHANGED , ( e ) => { console . log ( e ); //{ // clickedElementIndex: 2, // isClickedElementSelected: true, // selectedElementIndices: [0, 1, 2], // type: \"onSelectionChanged\" //} if ( e . isClickedElementSelected ){ viewer . getElementDataByIndex ( e . clickedElementIndex , onSuccess , onError ); } });","title":"Event Handler and Event Argument"},{"location":"developer/examples/","text":"Examples \u00b6 Save and Restore Viewpoint \u00b6 This example saves BCF viewpoint and screenshot temporarily. Clicking on a screenshot will restore a previously saved viewpoint. Highlight Walls by Floor \u00b6 This example finds all wall elements on a selected floor by database query and then changes wall color to red. Calculate Total Perimeter and Area \u00b6 This example calculates total perimeter and area of selected floor elements by aggregation query. Create Coloured 3D Zones \u00b6 This example finds all floor elements on a selected floor and creates extrusions in different colours. Asset Tagging \u00b6 This example calculates bounding boxes of kitchen equipments and places custom tags for them.","title":"Examples"},{"location":"developer/examples/#examples","text":"","title":"Examples"},{"location":"developer/examples/#save-and-restore-viewpoint","text":"This example saves BCF viewpoint and screenshot temporarily. Clicking on a screenshot will restore a previously saved viewpoint.","title":"Save and Restore Viewpoint"},{"location":"developer/examples/#highlight-walls-by-floor","text":"This example finds all wall elements on a selected floor by database query and then changes wall color to red.","title":"Highlight Walls by Floor"},{"location":"developer/examples/#calculate-total-perimeter-and-area","text":"This example calculates total perimeter and area of selected floor elements by aggregation query.","title":"Calculate Total Perimeter and Area"},{"location":"developer/examples/#create-coloured-3d-zones","text":"This example finds all floor elements on a selected floor and creates extrusions in different colours.","title":"Create Coloured 3D Zones"},{"location":"developer/examples/#asset-tagging","text":"This example calculates bounding boxes of kitchen equipments and places custom tags for them.","title":"Asset Tagging"},{"location":"developer/getting-started/","text":"Getting Started with bimU.io Viewer API \u00b6 Advanced users, digital specialists, and software developers can take advantage of bimU.io Viewer API (Application Programming Interface) to create bespoke BIM Web applications based on the bimU.io platform technology. We aim to make your development experience simple and allow you to quickly put together BIM applications on the Web without having to handle 3D computer graphics from scratch. Overview \u00b6 bimU.io Viewer API is a development toolkit that provides out-of-the-box 3D BIM viewer and database. It is packaged as a web front-end library that is able to: render BIM models hosted on bimU.io in your own web application. extend bimU.io Viewer's core functionality. retrieve model and element information from BIM database. create BIM-based digital solutions, such as custom visualisation, data analytics, Digital Twin, IoT (Internet of Things), etc. Prerequisites \u00b6 Basic programming skills and web development experience in JavaScript, HTML, CSS, etc. will be helpful. bimU.io Viewer is built upon the most popular Web 3D library - Three.js. Knowledge in computer graphics and Three.js will bring you up to speed. You need to have a bimU.io Pro account which is currently the default subscription and freely available until June 2021. You need to upload your BIM model to bimU.io Viewer or simply use the sample models provided by bimU.io. There are various different options in terms of website hosting. For development purpose, we recommend Web Server for Chrome if you are going to code in vanilla HTML, JavaScript, or jQuery. Furthermore, if you are an experienced web developer, a development server included in a front-end stack or boilerplate, such as React, Angular, Vue, etc. is a preferred option. For production use, while most cloud providers, such as AWS, Azure, etc. offer static site hosting capabilities, products like Netlify or Firebase Hosting would make your life much easier. Using the latest version of Google Chrome browser is always recommended. Main Concepts \u00b6 When a BIM model is loaded via bimU.io Viewer JavaScript API, it literally has the same functionality as in bimU.io Viewer. You can further customise how the viewer component or your model looks like by calling other API functions. All available API functions are listed in the API Reference . After proper initialisation, the viewer component can render a bimU.io-hosted model on your own webpage if correct crednetials are provided. Your website will then manipulate the viewer component and the loaded model with bimU.io Viewer JavaScript API. The viewer component is a pure front-end, browser-side 3D canvas based on WebGL technology. You don't necessarily have to set up a back-end server application if model password authentication is used. However, it is strongly recommended to use API Key authentication which requires a back-end, server-side web application to request for a one-time access token to load a model. The viewer component will load full geometry initially for users to see entire model visually. However, it does not load all non-geometric BIM data at once. There are several API methods that can query server-side BIM database to retrieve model metadata, element properties, etc. individually. Quick Start \u00b6 We've put together a JSFiddle to walk you through a quick demo with minimum setup to load a sample bimU.io model. With all necessary dependencies added in, you can easily start to play around bimU.io Viewer API in the sandbox immediately by opening or cloning the JSFiddle here . Below is a <div> element that functions as a container for the viewer component. A DOM ID must be specified and passed into a viewer configuration object for initialisation. < div id = \"viewer\" style = \"width:1000px;height:500px;background-color: black;border: 5px solid black;\" ></ div > Firstly, a Viewer object must be initialised with proper configuration. A model can then be loaded by supplying model configuration and callback functions to the loadModel method. The methods exposed by the Viewer object provide all functionality. const onPorgress = ( e ) => console . log ( e ); // Callback that reports model loading progress. const onLoaded = ( e ) => console . log ( e ); // Callback when model is fully loaded. const onError = ( e ) => console . log ( e ); // Callback when model fails to load. // Viewer configuration object let viewerConfigs = { domElementId : \"viewer\" , showUI : true }; // Initialise a Viewer let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize (); // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : \"YOUR_PASSWORD\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); Support \u00b6 Please log a ticket on bimU.io's support centre or email support@bimu.io if you have any query. bimU.io Support Team is more than happy to answer any technical questions.","title":"Getting Started"},{"location":"developer/getting-started/#getting-started-with-bimuio-viewer-api","text":"Advanced users, digital specialists, and software developers can take advantage of bimU.io Viewer API (Application Programming Interface) to create bespoke BIM Web applications based on the bimU.io platform technology. We aim to make your development experience simple and allow you to quickly put together BIM applications on the Web without having to handle 3D computer graphics from scratch.","title":"Getting Started with bimU.io Viewer API"},{"location":"developer/getting-started/#overview","text":"bimU.io Viewer API is a development toolkit that provides out-of-the-box 3D BIM viewer and database. It is packaged as a web front-end library that is able to: render BIM models hosted on bimU.io in your own web application. extend bimU.io Viewer's core functionality. retrieve model and element information from BIM database. create BIM-based digital solutions, such as custom visualisation, data analytics, Digital Twin, IoT (Internet of Things), etc.","title":"Overview"},{"location":"developer/getting-started/#prerequisites","text":"Basic programming skills and web development experience in JavaScript, HTML, CSS, etc. will be helpful. bimU.io Viewer is built upon the most popular Web 3D library - Three.js. Knowledge in computer graphics and Three.js will bring you up to speed. You need to have a bimU.io Pro account which is currently the default subscription and freely available until June 2021. You need to upload your BIM model to bimU.io Viewer or simply use the sample models provided by bimU.io. There are various different options in terms of website hosting. For development purpose, we recommend Web Server for Chrome if you are going to code in vanilla HTML, JavaScript, or jQuery. Furthermore, if you are an experienced web developer, a development server included in a front-end stack or boilerplate, such as React, Angular, Vue, etc. is a preferred option. For production use, while most cloud providers, such as AWS, Azure, etc. offer static site hosting capabilities, products like Netlify or Firebase Hosting would make your life much easier. Using the latest version of Google Chrome browser is always recommended.","title":"Prerequisites"},{"location":"developer/getting-started/#main-concepts","text":"When a BIM model is loaded via bimU.io Viewer JavaScript API, it literally has the same functionality as in bimU.io Viewer. You can further customise how the viewer component or your model looks like by calling other API functions. All available API functions are listed in the API Reference . After proper initialisation, the viewer component can render a bimU.io-hosted model on your own webpage if correct crednetials are provided. Your website will then manipulate the viewer component and the loaded model with bimU.io Viewer JavaScript API. The viewer component is a pure front-end, browser-side 3D canvas based on WebGL technology. You don't necessarily have to set up a back-end server application if model password authentication is used. However, it is strongly recommended to use API Key authentication which requires a back-end, server-side web application to request for a one-time access token to load a model. The viewer component will load full geometry initially for users to see entire model visually. However, it does not load all non-geometric BIM data at once. There are several API methods that can query server-side BIM database to retrieve model metadata, element properties, etc. individually.","title":"Main Concepts"},{"location":"developer/getting-started/#quick-start","text":"We've put together a JSFiddle to walk you through a quick demo with minimum setup to load a sample bimU.io model. With all necessary dependencies added in, you can easily start to play around bimU.io Viewer API in the sandbox immediately by opening or cloning the JSFiddle here . Below is a <div> element that functions as a container for the viewer component. A DOM ID must be specified and passed into a viewer configuration object for initialisation. < div id = \"viewer\" style = \"width:1000px;height:500px;background-color: black;border: 5px solid black;\" ></ div > Firstly, a Viewer object must be initialised with proper configuration. A model can then be loaded by supplying model configuration and callback functions to the loadModel method. The methods exposed by the Viewer object provide all functionality. const onPorgress = ( e ) => console . log ( e ); // Callback that reports model loading progress. const onLoaded = ( e ) => console . log ( e ); // Callback when model is fully loaded. const onError = ( e ) => console . log ( e ); // Callback when model fails to load. // Viewer configuration object let viewerConfigs = { domElementId : \"viewer\" , showUI : true }; // Initialise a Viewer let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize (); // Model configuration object let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , password : \"YOUR_PASSWORD\" }; // Load a model viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError );","title":"Quick Start"},{"location":"developer/getting-started/#support","text":"Please log a ticket on bimU.io's support centre or email support@bimu.io if you have any query. bimU.io Support Team is more than happy to answer any technical questions.","title":"Support"},{"location":"developer/initialisation/","text":"Initialisation \u00b6 Before initialising the viewer component, please make sure all dependencies are installed and imported properly. You might see an error message in browser console if an imported Three.js version is incompatible with the current bimU.io Viewer API version. bimU Namespace \u00b6 If bimU.io Viewer API is imported successfully (either via <script> tag or ES6 module), all available classes, enums, utilities, etc. are exposed under the bimU namespace. You can use dot key to explore the bimU variable. Some examples below. // Initialise a viewer let viewer = new bimU . Viewer ( viewerConfigs ); // Initialise a property selector let propertySelector = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Enum let func = bimU . AggregateFunctionsEnum . AVG ; Viewer Class \u00b6 This is the entry point to all bimU.io Viewer API functions that are listed in the API Reference . Dot key is the best exploration tool. Viewer configuration object must be passed into the Viewer's constructor. DOM element ID must be specified to contain the viewer component. The initialize method must be called before using other functions. The viewer variable used everywhere in our documentation literally refers to an instance of the Viewer class. let viewerConfigs = { domElementId : \"viewer\" , showFPS : false , showUI : true }; let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize (); Load Model \u00b6 The loadModel method loads full model geometry in the viewer container (i.e., a <div> element). Model ID must be specified in a model configuration object and can be found from the bimU.io Shared Link https://viewer.bimu.io/share/models/YOUR_MODEL_ID_IS_HERE . Either access token or password must be specified depending on what authentication method used. let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , accessToken : \"ACCESS_TOKEN\" , password : \"YOUR_MODEL_PASSWORD\" }; viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError ); Release Resource \u00b6 The dispose method can be called to free resources and reset configuration. viewer . dispose ();","title":"Initialisation"},{"location":"developer/initialisation/#initialisation","text":"Before initialising the viewer component, please make sure all dependencies are installed and imported properly. You might see an error message in browser console if an imported Three.js version is incompatible with the current bimU.io Viewer API version.","title":"Initialisation"},{"location":"developer/initialisation/#bimu-namespace","text":"If bimU.io Viewer API is imported successfully (either via <script> tag or ES6 module), all available classes, enums, utilities, etc. are exposed under the bimU namespace. You can use dot key to explore the bimU variable. Some examples below. // Initialise a viewer let viewer = new bimU . Viewer ( viewerConfigs ); // Initialise a property selector let propertySelector = new bimU . PropertySelector ( \"Text\" , \"Mark\" ); // Enum let func = bimU . AggregateFunctionsEnum . AVG ;","title":"bimU Namespace"},{"location":"developer/initialisation/#viewer-class","text":"This is the entry point to all bimU.io Viewer API functions that are listed in the API Reference . Dot key is the best exploration tool. Viewer configuration object must be passed into the Viewer's constructor. DOM element ID must be specified to contain the viewer component. The initialize method must be called before using other functions. The viewer variable used everywhere in our documentation literally refers to an instance of the Viewer class. let viewerConfigs = { domElementId : \"viewer\" , showFPS : false , showUI : true }; let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize ();","title":"Viewer Class"},{"location":"developer/initialisation/#load-model","text":"The loadModel method loads full model geometry in the viewer container (i.e., a <div> element). Model ID must be specified in a model configuration object and can be found from the bimU.io Shared Link https://viewer.bimu.io/share/models/YOUR_MODEL_ID_IS_HERE . Either access token or password must be specified depending on what authentication method used. let modelConfigs = { modelId : \"YOUR_MODEL_ID\" , accessToken : \"ACCESS_TOKEN\" , password : \"YOUR_MODEL_PASSWORD\" }; viewer . loadModel ( modelConfigs , onPorgress , onLoaded , onError );","title":"Load Model"},{"location":"developer/initialisation/#release-resource","text":"The dispose method can be called to free resources and reset configuration. viewer . dispose ();","title":"Release Resource"},{"location":"developer/model-elements/","text":"Model elements \u00b6 This section summarises how to control the states of model elements in the viewer component, such as selection, visibility, appearance, etc. If you want to retrieve element data from bimU.io server, such as element properties, database query, etc., please refer to the next section BIM Database . Every BIM authoring tool has its own mechanism to track and manage model element identifiers, such as element ID, unique ID, object ID, instance GUID, GUID, etc. To avoid confusion, bimU.io uses element index which is an integer value for sorting model elements internally. Every model element in bimU.io has a unique element index and therefore serves as an identifier for manipulating model elements. Selection \u00b6 To know what model elements are currently selected by user, call the getElementIndicesBySelection function. You can use the anyElementSelected function to check if there's any selected model element beforehand. To clear current selection, call the unselectAllElements function. Visibility \u00b6 The hideSelectedElements function and the isolateSelectedElements function are useful to control visibility of currently selected model elements. The former can make them invisible, while the latter can make them visible but hide all other model elements. If you need to hide or unhide specific model elements, call the setVisibility function. The invertOthers argument can set all other model elements to an opposite value. For example, to isolate element indices from 0 to 4: // Make element indices 0 to 4 visible and hide all the rest viewer . setVisibility ([ 0 , 1 , 2 , 3 , 4 ], true , true ); There are two functions that can restore a model to its original state, i.e., all model elements are visible. The unhideAllElements function is self-explanatory. The resetVisibility function will not only unhide all elements but also clear current section box. Color Override \u00b6 Occasionally you might need to change color for some model elements. For example, highlighting a clash, categorising by disciplines, etc. The setColor function allows to override original color of model elements. Below example highlights element indices from 0 to 4 in red. Calling the clearAllColorOverrides function will restore original colors for all model elements. // Element indices 0 to 4 will become red viewer . setColor ([ 0 , 1 , 2 , 3 , 4 ], new THREE . Color ( 0xff0000 )); Geometry \u00b6 To duplicate geometry of a model element, the getGeometry function returns primitive geometry as a Three.js BufferGeometry object. Some relevant functions are also based on geometric conditions of model elements, such as getLocation , getBoundingBox , getBoundingBoxBySelection , toggleWireframeMode , etc.","title":"Model Elements"},{"location":"developer/model-elements/#model-elements","text":"This section summarises how to control the states of model elements in the viewer component, such as selection, visibility, appearance, etc. If you want to retrieve element data from bimU.io server, such as element properties, database query, etc., please refer to the next section BIM Database . Every BIM authoring tool has its own mechanism to track and manage model element identifiers, such as element ID, unique ID, object ID, instance GUID, GUID, etc. To avoid confusion, bimU.io uses element index which is an integer value for sorting model elements internally. Every model element in bimU.io has a unique element index and therefore serves as an identifier for manipulating model elements.","title":"Model elements"},{"location":"developer/model-elements/#selection","text":"To know what model elements are currently selected by user, call the getElementIndicesBySelection function. You can use the anyElementSelected function to check if there's any selected model element beforehand. To clear current selection, call the unselectAllElements function.","title":"Selection"},{"location":"developer/model-elements/#visibility","text":"The hideSelectedElements function and the isolateSelectedElements function are useful to control visibility of currently selected model elements. The former can make them invisible, while the latter can make them visible but hide all other model elements. If you need to hide or unhide specific model elements, call the setVisibility function. The invertOthers argument can set all other model elements to an opposite value. For example, to isolate element indices from 0 to 4: // Make element indices 0 to 4 visible and hide all the rest viewer . setVisibility ([ 0 , 1 , 2 , 3 , 4 ], true , true ); There are two functions that can restore a model to its original state, i.e., all model elements are visible. The unhideAllElements function is self-explanatory. The resetVisibility function will not only unhide all elements but also clear current section box.","title":"Visibility"},{"location":"developer/model-elements/#color-override","text":"Occasionally you might need to change color for some model elements. For example, highlighting a clash, categorising by disciplines, etc. The setColor function allows to override original color of model elements. Below example highlights element indices from 0 to 4 in red. Calling the clearAllColorOverrides function will restore original colors for all model elements. // Element indices 0 to 4 will become red viewer . setColor ([ 0 , 1 , 2 , 3 , 4 ], new THREE . Color ( 0xff0000 ));","title":"Color Override"},{"location":"developer/model-elements/#geometry","text":"To duplicate geometry of a model element, the getGeometry function returns primitive geometry as a Three.js BufferGeometry object. Some relevant functions are also based on geometric conditions of model elements, such as getLocation , getBoundingBox , getBoundingBoxBySelection , toggleWireframeMode , etc.","title":"Geometry"},{"location":"developer/navigation-controls/","text":"Navigation Controls \u00b6 Basics \u00b6 There are a few built-in functions that adjust the viewer camera to focus on particular angles or items, such as alignToView , zoomToFit , zoomToSelection , zoomToObject , etc. These functions are also available on the default user interface. Camera Viewpoint \u00b6 Tweaking camera parameters can be a complicated task. bimU.io adopts the prevailling BCF (BIM Collaboration Format) open standard and simplifies its data schema to streamline this process. To capture current camera viewpoint in the viewer, calling the getViewpoint function returns the following JSON format. You can keep it somewhere (e.g., in your own database) and pass it into the setViewpoint function later on to restore a previously saved viewpoint. Note that element information is not stored in the JSON object at the moment. { \"camera\" : { \"cameraViewPoint\" : { \"x\" : -0.9173076695143414 , \"y\" : -2.981698504183087 , \"z\" : 23.5427893532144 }, \"cameraDirection\" : { \"x\" : 0.23320190941814167 , \"y\" : 0.48592126302799127 , \"z\" : -0.8423166836653626 }, \"cameraUpVector\" : { \"x\" : 0.3644454140253172 , \"y\" : 0.7593924780881949 , \"z\" : 0.538982935183467 }, \"viewToWorldScale\" : 0 , \"fieldOfView\" : 60 }, \"originatingSystem\" : \"bimU.io Web Viewer\" } Sectioning \u00b6 Section plane/clipping plane information can be captured in the BCF-compatible JSON format as well. Below is a sample camera viewpoint when section box is enabled in the viewer. { \"camera\" : { ... }, \"clippingPlanes\" : [ { \"normal\" : { \"x\" : -1 , \"y\" : 0 , \"z\" : 0 }, \"constant\" : -15.612010478973389 }, { \"normal\" : { \"x\" : 1 , \"y\" : 0 , \"z\" : 0 }, \"constant\" : -27.28821611404419 }, { \"normal\" : { \"x\" : 0 , \"y\" : -1 , \"z\" : 0 }, \"constant\" : -3.803048580420051 }, { \"normal\" : { \"x\" : 0 , \"y\" : 1 , \"z\" : 0 }, \"constant\" : -9.255849331152472 }, { \"normal\" : { \"x\" : 0 , \"y\" : 0 , \"z\" : -1 }, \"constant\" : -6.7235229899076785 }, { \"normal\" : { \"x\" : 0 , \"y\" : 0 , \"z\" : 1 }, \"constant\" : -17.06601223246139 } ] } It's worth to know that section box visibility and section planes applied in the JSON object are separate things. Section box is a built-in functionality in the user interface. Call the toggleSectionbox function to make it visible or hidden. To control the extents of section box, you can take advantage of the setSectionBox and the sectionAroundSelection functions. Call the resetVisibility function to clear current section box state. Camera Projection \u00b6 bimU.io Viewer uses perspective camera by default which is the most common projection mode for rendering a 3D scene. If you wish to switch to orthographic projection, call the setProjectionMode function and use the isPerspectiveMode function to check current projection mode. If current viewpoint is rendered by perspective camera, the fieldOfView property in the BCF-compatible JSON object is a positive value. Otherwise, the viewToWorldScale will be a positive value when orthographic camera is used.","title":"Navigation Controls"},{"location":"developer/navigation-controls/#navigation-controls","text":"","title":"Navigation Controls"},{"location":"developer/navigation-controls/#basics","text":"There are a few built-in functions that adjust the viewer camera to focus on particular angles or items, such as alignToView , zoomToFit , zoomToSelection , zoomToObject , etc. These functions are also available on the default user interface.","title":"Basics"},{"location":"developer/navigation-controls/#camera-viewpoint","text":"Tweaking camera parameters can be a complicated task. bimU.io adopts the prevailling BCF (BIM Collaboration Format) open standard and simplifies its data schema to streamline this process. To capture current camera viewpoint in the viewer, calling the getViewpoint function returns the following JSON format. You can keep it somewhere (e.g., in your own database) and pass it into the setViewpoint function later on to restore a previously saved viewpoint. Note that element information is not stored in the JSON object at the moment. { \"camera\" : { \"cameraViewPoint\" : { \"x\" : -0.9173076695143414 , \"y\" : -2.981698504183087 , \"z\" : 23.5427893532144 }, \"cameraDirection\" : { \"x\" : 0.23320190941814167 , \"y\" : 0.48592126302799127 , \"z\" : -0.8423166836653626 }, \"cameraUpVector\" : { \"x\" : 0.3644454140253172 , \"y\" : 0.7593924780881949 , \"z\" : 0.538982935183467 }, \"viewToWorldScale\" : 0 , \"fieldOfView\" : 60 }, \"originatingSystem\" : \"bimU.io Web Viewer\" }","title":"Camera Viewpoint"},{"location":"developer/navigation-controls/#sectioning","text":"Section plane/clipping plane information can be captured in the BCF-compatible JSON format as well. Below is a sample camera viewpoint when section box is enabled in the viewer. { \"camera\" : { ... }, \"clippingPlanes\" : [ { \"normal\" : { \"x\" : -1 , \"y\" : 0 , \"z\" : 0 }, \"constant\" : -15.612010478973389 }, { \"normal\" : { \"x\" : 1 , \"y\" : 0 , \"z\" : 0 }, \"constant\" : -27.28821611404419 }, { \"normal\" : { \"x\" : 0 , \"y\" : -1 , \"z\" : 0 }, \"constant\" : -3.803048580420051 }, { \"normal\" : { \"x\" : 0 , \"y\" : 1 , \"z\" : 0 }, \"constant\" : -9.255849331152472 }, { \"normal\" : { \"x\" : 0 , \"y\" : 0 , \"z\" : -1 }, \"constant\" : -6.7235229899076785 }, { \"normal\" : { \"x\" : 0 , \"y\" : 0 , \"z\" : 1 }, \"constant\" : -17.06601223246139 } ] } It's worth to know that section box visibility and section planes applied in the JSON object are separate things. Section box is a built-in functionality in the user interface. Call the toggleSectionbox function to make it visible or hidden. To control the extents of section box, you can take advantage of the setSectionBox and the sectionAroundSelection functions. Call the resetVisibility function to clear current section box state.","title":"Sectioning"},{"location":"developer/navigation-controls/#camera-projection","text":"bimU.io Viewer uses perspective camera by default which is the most common projection mode for rendering a 3D scene. If you wish to switch to orthographic projection, call the setProjectionMode function and use the isPerspectiveMode function to check current projection mode. If current viewpoint is rendered by perspective camera, the fieldOfView property in the BCF-compatible JSON object is a positive value. Otherwise, the viewToWorldScale will be a positive value when orthographic camera is used.","title":"Camera Projection"},{"location":"developer/project-setup/","text":"Project Setup \u00b6 Dependencies \u00b6 bimU.io Viewer API is based on Three.js. So the both libraries must be included in your project. Additionally, Three.js must be loaded in global scope and exposed as a global variable called THREE. If you use vanilla HTML, CSS, JavaScript or a front-end framework that doesn't require compilation, such as Bootstrap, Semantic UI, etc., both Three.js and bimU.io Viewer API are exported as Universal Modules that can be included before your project's closing </body> tag. For example, the both libraries are available over a CDN: < script src = \"https://cdn.jsdelivr.net/npm/three@0.113.2/build/three.min.js\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdn.jsdelivr.net/npm/bimu.io.viewer@latest/dist/bimU.io.Viewer.umd.js\" crossorigin = \"anonymous\" ></ script > You can also use a JavaScript package manager to install the both libraries. Since Three.js is specified as a dependency of bimU.io Viewer API, below is an NPM command that will save them to your project folder at the same time. npm install bimu.io.viewer --save If you use a front-end framework that requires a module loader or a compilation step, such as React, Angular, Vue, etc., please make sure Three.js is loaded first and accessible by a global variable called THREE before importing bimU.io's ES6 module. The type definitions are included in the package, so you can also benefit from the IntelliSense in Visual Studio Code. // ThreeImporter.js import * as THREE from 'three/build/three' ; // Assign THREE to global variable window . THREE = THREE ; // ViewerComponent.js import ThreeImporter from './ThreeImporter' ; import * as bimU from 'bimu.io.viewer' ; Debugging \u00b6 All available bimU.io Viewer API functions are exposed as methods of the Viewer object. It would be easier to explore and inspect in browser console if a viewer variable is also exposed in global scope. let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize (); window . viewer = viewer ; Sample Projects \u00b6 We've created a couple of Hello World boilerplates: Vanilla HTML + JavaScript Sample Project : This project loads a model on a dummy HTML web page with some basic UI. React Sample Project : This project is a React.js web application set up by using Create React App .","title":"Project Setup"},{"location":"developer/project-setup/#project-setup","text":"","title":"Project Setup"},{"location":"developer/project-setup/#dependencies","text":"bimU.io Viewer API is based on Three.js. So the both libraries must be included in your project. Additionally, Three.js must be loaded in global scope and exposed as a global variable called THREE. If you use vanilla HTML, CSS, JavaScript or a front-end framework that doesn't require compilation, such as Bootstrap, Semantic UI, etc., both Three.js and bimU.io Viewer API are exported as Universal Modules that can be included before your project's closing </body> tag. For example, the both libraries are available over a CDN: < script src = \"https://cdn.jsdelivr.net/npm/three@0.113.2/build/three.min.js\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdn.jsdelivr.net/npm/bimu.io.viewer@latest/dist/bimU.io.Viewer.umd.js\" crossorigin = \"anonymous\" ></ script > You can also use a JavaScript package manager to install the both libraries. Since Three.js is specified as a dependency of bimU.io Viewer API, below is an NPM command that will save them to your project folder at the same time. npm install bimu.io.viewer --save If you use a front-end framework that requires a module loader or a compilation step, such as React, Angular, Vue, etc., please make sure Three.js is loaded first and accessible by a global variable called THREE before importing bimU.io's ES6 module. The type definitions are included in the package, so you can also benefit from the IntelliSense in Visual Studio Code. // ThreeImporter.js import * as THREE from 'three/build/three' ; // Assign THREE to global variable window . THREE = THREE ; // ViewerComponent.js import ThreeImporter from './ThreeImporter' ; import * as bimU from 'bimu.io.viewer' ;","title":"Dependencies"},{"location":"developer/project-setup/#debugging","text":"All available bimU.io Viewer API functions are exposed as methods of the Viewer object. It would be easier to explore and inspect in browser console if a viewer variable is also exposed in global scope. let viewer = new bimU . Viewer ( viewerConfigs ); viewer . initialize (); window . viewer = viewer ;","title":"Debugging"},{"location":"developer/project-setup/#sample-projects","text":"We've created a couple of Hello World boilerplates: Vanilla HTML + JavaScript Sample Project : This project loads a model on a dummy HTML web page with some basic UI. React Sample Project : This project is a React.js web application set up by using Create React App .","title":"Sample Projects"},{"location":"developer/user-interface/","text":"User Interface \u00b6 By default bimU.io Viewer API renders a 3D canvas without loading any user interface. The showUI option in the viewer configuration object has to be explicitly set to true to enable the default toolbar. The Materialize framework is used under the hood to help developers quickly put together user interface. You can leverage its existing UI components and functionality if necessary. In case of CSS conflict, the showUI option should be set to false . Then the Materialize framework won't be loaded at all. Ideally, you should overlay your own UI on the viewer component and get it integrated with a UI framework within your production tech stack. Default Toolbar \u00b6 The default toolbar contains a few icon buttons that are identical to the ones on bimU.io Viewer, including navigation controls, element information, measurements, full screen, etc. Each default button has a predefined and fixed DOM element ID. The buttonColor option in the viewer configuration object can be changed to suit your desired color scheme. Custom Button \u00b6 You can also add more buttons to the default toolbar. The addCustomButton function allows to customise an icon button with various styling options. See availale icons here or import your own icon font. To remove an existing (either default or custom) button, simply call the helper function removeDomElement . A couple of examples below. viewer . addCustomButton ( \"button1\" , \"wifi\" , \"#2196F3\" , \"Like it\" , function (){ alert ( \"You liked this model.\" ); }); viewer . addCustomButton ( \"button2\" , \"router\" , \"#4CAF50 \" , \"Unlike it\" , function (){ alert ( \"You unliked this model.\" ); }); Dialog \u00b6 If you need to pop up some instruction or information for your users, the showDialog and the closeDialog functions come in quite handy. The showHelp and the showElementInformation functions use it internally. An illustrative example below. let now = new Date (); let html = ` <table> <tbody> <tr> <td><strong>Timestamp</strong></td> <td> ${ now } </td> </tr> </tbody> </table>` ; viewer . showDialog ( \"Do you want to submit your request now?\" , html , \"No\" , \"Yes\" , () => { // Do your stuff... }); Background \u00b6 The viewer canvas comes with a white background by default. Call the setBackgroundColor function to select a desired color.","title":"User Interface"},{"location":"developer/user-interface/#user-interface","text":"By default bimU.io Viewer API renders a 3D canvas without loading any user interface. The showUI option in the viewer configuration object has to be explicitly set to true to enable the default toolbar. The Materialize framework is used under the hood to help developers quickly put together user interface. You can leverage its existing UI components and functionality if necessary. In case of CSS conflict, the showUI option should be set to false . Then the Materialize framework won't be loaded at all. Ideally, you should overlay your own UI on the viewer component and get it integrated with a UI framework within your production tech stack.","title":"User Interface"},{"location":"developer/user-interface/#default-toolbar","text":"The default toolbar contains a few icon buttons that are identical to the ones on bimU.io Viewer, including navigation controls, element information, measurements, full screen, etc. Each default button has a predefined and fixed DOM element ID. The buttonColor option in the viewer configuration object can be changed to suit your desired color scheme.","title":"Default Toolbar"},{"location":"developer/user-interface/#custom-button","text":"You can also add more buttons to the default toolbar. The addCustomButton function allows to customise an icon button with various styling options. See availale icons here or import your own icon font. To remove an existing (either default or custom) button, simply call the helper function removeDomElement . A couple of examples below. viewer . addCustomButton ( \"button1\" , \"wifi\" , \"#2196F3\" , \"Like it\" , function (){ alert ( \"You liked this model.\" ); }); viewer . addCustomButton ( \"button2\" , \"router\" , \"#4CAF50 \" , \"Unlike it\" , function (){ alert ( \"You unliked this model.\" ); });","title":"Custom Button"},{"location":"developer/user-interface/#dialog","text":"If you need to pop up some instruction or information for your users, the showDialog and the closeDialog functions come in quite handy. The showHelp and the showElementInformation functions use it internally. An illustrative example below. let now = new Date (); let html = ` <table> <tbody> <tr> <td><strong>Timestamp</strong></td> <td> ${ now } </td> </tr> </tbody> </table>` ; viewer . showDialog ( \"Do you want to submit your request now?\" , html , \"No\" , \"Yes\" , () => { // Do your stuff... });","title":"Dialog"},{"location":"developer/user-interface/#background","text":"The viewer canvas comes with a white background by default. Call the setBackgroundColor function to select a desired color.","title":"Background"},{"location":"viewer/embed-in-other-applications/","text":"Embed in Other Applications \u00b6 You can integrate bimU.io with ohter applications by embedding. It is then possible to view your BIM model and data from other web-based applications if the following two common embedding methods are supported. Some usage examples are also provided below. Note that sharing must be switched on to embed a bimU.io model. Types of Embedding \u00b6 IFrame: An IFrame (Inline Frame) is an HTML (HyperText Markup Language) document embedded inside another HTML document on a website. The IFrame HTML element is often used to insert content from another source, such as a video, into a webpage. Embed URL : To have better control of how overall user interface looks like, some hosting applications might prefer a URL (Uniform Resource Locator) link to an external webpage rather than an IFrame. Open the Embed Options from the three-dot menu. Both IFrame code and embed URL can be found in there. Embed in Microsoft Teams \u00b6 Microsoft Teams is cloud-based team collaboration software that is part of the Office 365 suite of applications. The core capabilities include business messaging, calling, video meetings, file sharing, etc. It also supports embedding an external website within a tab in a channel. You can add a new tab by clicking the plus button and then select Website from various apps. Copy an Embed URL from a bimU.io model and paste it into the URL field shown in the above dialog. Embed in Microsoft SharePoint \u00b6 Microsoft SharePoint is a web-based collaborative platform that integrates with Microsoft Office. Organizations use SharePoint to create websites and manage documents. There two types of user interface: Classic and Modren. Classic SharePoint was a traditional look while Modern SharePoint is a whole new experience introduced to create responsive websites for different devices and screen sizes. Modern SharePoint exists only in SharePoint Online. You might need to ask your IT administrator to whitelist bimU.io URL if it is blocked. Modern SharePoint Page Simply add an Embed web part in a Modern SharePoint Page and insert either Embed URL or IFrame code copied from a bimU.io model. Classic SharePoint Page You can insert a Page Viewer web part in a Classic SharePoint Page. Then open the tool pane and paste an Embed URL copied from a bimU.io model in the Link text box. You might want to adjust the layout and the appearance a bit to make it look better. Embed in Your Own Website \u00b6 Most CMS (Content Management System) websites, such as WordPress, can embed an external webapge by different technologies. You might need a plugin for this, too. If you have access to the source code of a website, it is also possible to insert an IFrame directly into your own webpage. Please feel free to reach out by logging a support ticket if you come across any problem.","title":"Embed in Other Applications"},{"location":"viewer/embed-in-other-applications/#embed-in-other-applications","text":"You can integrate bimU.io with ohter applications by embedding. It is then possible to view your BIM model and data from other web-based applications if the following two common embedding methods are supported. Some usage examples are also provided below. Note that sharing must be switched on to embed a bimU.io model.","title":"Embed in Other Applications"},{"location":"viewer/embed-in-other-applications/#types-of-embedding","text":"IFrame: An IFrame (Inline Frame) is an HTML (HyperText Markup Language) document embedded inside another HTML document on a website. The IFrame HTML element is often used to insert content from another source, such as a video, into a webpage. Embed URL : To have better control of how overall user interface looks like, some hosting applications might prefer a URL (Uniform Resource Locator) link to an external webpage rather than an IFrame. Open the Embed Options from the three-dot menu. Both IFrame code and embed URL can be found in there.","title":"Types of Embedding"},{"location":"viewer/embed-in-other-applications/#embed-in-microsoft-teams","text":"Microsoft Teams is cloud-based team collaboration software that is part of the Office 365 suite of applications. The core capabilities include business messaging, calling, video meetings, file sharing, etc. It also supports embedding an external website within a tab in a channel. You can add a new tab by clicking the plus button and then select Website from various apps. Copy an Embed URL from a bimU.io model and paste it into the URL field shown in the above dialog.","title":"Embed in Microsoft Teams"},{"location":"viewer/embed-in-other-applications/#embed-in-microsoft-sharepoint","text":"Microsoft SharePoint is a web-based collaborative platform that integrates with Microsoft Office. Organizations use SharePoint to create websites and manage documents. There two types of user interface: Classic and Modren. Classic SharePoint was a traditional look while Modern SharePoint is a whole new experience introduced to create responsive websites for different devices and screen sizes. Modern SharePoint exists only in SharePoint Online. You might need to ask your IT administrator to whitelist bimU.io URL if it is blocked. Modern SharePoint Page Simply add an Embed web part in a Modern SharePoint Page and insert either Embed URL or IFrame code copied from a bimU.io model. Classic SharePoint Page You can insert a Page Viewer web part in a Classic SharePoint Page. Then open the tool pane and paste an Embed URL copied from a bimU.io model in the Link text box. You might want to adjust the layout and the appearance a bit to make it look better.","title":"Embed in Microsoft SharePoint"},{"location":"viewer/embed-in-other-applications/#embed-in-your-own-website","text":"Most CMS (Content Management System) websites, such as WordPress, can embed an external webapge by different technologies. You might need a plugin for this, too. If you have access to the source code of a website, it is also possible to insert an IFrame directly into your own webpage. Please feel free to reach out by logging a support ticket if you come across any problem.","title":"Embed in Your Own Website"},{"location":"viewer/log-in-to-bimu-viewer/","text":"Log in to bimU.io \u00b6 We aim to make your life easier. You don't need to sign up a new account to use bimU.io. Instead, we provide two ways of authentication. Simply log in to bimU.io via Microsoft or Google. Both of them support Single Sign-On (SSO). You can use your personal, company, or school account to log in. See details of different account types below. Log in to bimU.io Viewer Log in with Microsoft Account \u00b6 Organisational account: This has to be an account set up by your company, school, or organisation via Microsoft Azure Active Directory (AAD). If you use Microsoft Office 365 or any Microsoft online service, your Microsoft account should be able to log in to bimU.io directly. However, this capability might be disabled by your IT administrator. Personal account: This is an account offered by Microsoft for personal use, such as yourname@outlook.com or yourname@hotmail.com . It could also be any email address. For example, you might use yourname@gmail.com to sign up a Microsoft account. Log in with Google Account \u00b6 G Suite account: This has to be an account set up by your company, school, or organisation via Google G Suite. If you use Gmail, Google Docs, or any Google online service, your Google account should be able to log in to bimU.io directly. However, this capability might be disabled by your IT administrator. Note that a Google G Suite account must associate with a custom domain (e.g., yourname@mycompany.com ) rather than using yourname@gmail.com . Gmail account: This is an account offered by Google for personal use. It must be yourname@gmail.com .","title":"Log in to bimU.io"},{"location":"viewer/log-in-to-bimu-viewer/#log-in-to-bimuio","text":"We aim to make your life easier. You don't need to sign up a new account to use bimU.io. Instead, we provide two ways of authentication. Simply log in to bimU.io via Microsoft or Google. Both of them support Single Sign-On (SSO). You can use your personal, company, or school account to log in. See details of different account types below. Log in to bimU.io Viewer","title":"Log in to bimU.io"},{"location":"viewer/log-in-to-bimu-viewer/#log-in-with-microsoft-account","text":"Organisational account: This has to be an account set up by your company, school, or organisation via Microsoft Azure Active Directory (AAD). If you use Microsoft Office 365 or any Microsoft online service, your Microsoft account should be able to log in to bimU.io directly. However, this capability might be disabled by your IT administrator. Personal account: This is an account offered by Microsoft for personal use, such as yourname@outlook.com or yourname@hotmail.com . It could also be any email address. For example, you might use yourname@gmail.com to sign up a Microsoft account.","title":"Log in with Microsoft Account"},{"location":"viewer/log-in-to-bimu-viewer/#log-in-with-google-account","text":"G Suite account: This has to be an account set up by your company, school, or organisation via Google G Suite. If you use Gmail, Google Docs, or any Google online service, your Google account should be able to log in to bimU.io directly. However, this capability might be disabled by your IT administrator. Note that a Google G Suite account must associate with a custom domain (e.g., yourname@mycompany.com ) rather than using yourname@gmail.com . Gmail account: This is an account offered by Google for personal use. It must be yourname@gmail.com .","title":"Log in with Google Account"},{"location":"viewer/manage-bim-models/","text":"Manage BIM Models \u00b6 After logging in successfully, you should see the main user interface which is made up of three sections and looks something like the following screenshot. Menu bar is on the top right where you can upload models, check out notifications and upload progress, edit user profile, check launcher and web app versions, report problems, view documentation, etc. Onboarding Information provides some basic guidance on how to use bimU.io. List of Models is a table of all uploaded models. Your models should be managed from here. See more details below. Sample Models \u00b6 Four sample models are provided for a new user to play around: Sample_Building.rvt: A 6-floor residential building modelled in Autodesk Revit. Sample_Federated.nwd: A number of structural, Mechanical, Eletrical, and Plumbing (MEP) models combined in Autodesk Navisworks. Sample_Tekla: A steel structure modelled in Trimble Tekla Structures. Sample_Bentley.ifc: A simple building frame modelled in Bentley OpeningBuildings Designer (formerly AECOsim Building Designer). Model Properties \u00b6 Name: Model filename or document name. Label: Indicating whether a model is labelled. Source: Indicating what BIM software or format a model was uploaded from. Size: Model file size after compression. IFC files won't be compressed. Updated: Last updated timestamp. Models are sorted by this property. Share: Indicating whether a model is shared. Label a Model \u00b6 Label is a simple way to categorise your models. There are five different color labels to choose from. Click on the same color label to remove it. View a Model \u00b6 Open model viewer by clicking the magnifier button or simply clicking on a model name. Share a Model \u00b6 A Share Settings dialog will pop up after switching on the toggle button. You can also open it from the three-dot menu. Once sharing is enabled, a model is accessible by anyone who has the link shown in the dialog. Login is not required to view a shared model. It is not possible to make any change to it via the link. But we strongly suggest set a password to protect your model and only share it privately. To disable sharing, simply switch off the toggle button. Recently a basic comment functionality has been added to bimU.io Viewer that allows guest users to create markups or comment on markups within a password-protected BIM model without creating an account. When a password is set, guest users will then be asked to provide their name in addition to the password on the login screen. The name will be used for comments in the current session. Embed a Model \u00b6 You can embed a model and view it within other web applications, such as Microsoft Teams or Microsoft SharePoint. More details can be found here . Rename a Model \u00b6 To rename a model, click the three-dot button and then click the Rename option from the context menu. Delete a Model \u00b6 To delete a model, click the three-dot button and then click the Delete option from the context menu. Note that this operation cannot be undone.","title":"Manage BIM Models"},{"location":"viewer/manage-bim-models/#manage-bim-models","text":"After logging in successfully, you should see the main user interface which is made up of three sections and looks something like the following screenshot. Menu bar is on the top right where you can upload models, check out notifications and upload progress, edit user profile, check launcher and web app versions, report problems, view documentation, etc. Onboarding Information provides some basic guidance on how to use bimU.io. List of Models is a table of all uploaded models. Your models should be managed from here. See more details below.","title":"Manage BIM Models"},{"location":"viewer/manage-bim-models/#sample-models","text":"Four sample models are provided for a new user to play around: Sample_Building.rvt: A 6-floor residential building modelled in Autodesk Revit. Sample_Federated.nwd: A number of structural, Mechanical, Eletrical, and Plumbing (MEP) models combined in Autodesk Navisworks. Sample_Tekla: A steel structure modelled in Trimble Tekla Structures. Sample_Bentley.ifc: A simple building frame modelled in Bentley OpeningBuildings Designer (formerly AECOsim Building Designer).","title":"Sample Models"},{"location":"viewer/manage-bim-models/#model-properties","text":"Name: Model filename or document name. Label: Indicating whether a model is labelled. Source: Indicating what BIM software or format a model was uploaded from. Size: Model file size after compression. IFC files won't be compressed. Updated: Last updated timestamp. Models are sorted by this property. Share: Indicating whether a model is shared.","title":"Model Properties"},{"location":"viewer/manage-bim-models/#label-a-model","text":"Label is a simple way to categorise your models. There are five different color labels to choose from. Click on the same color label to remove it.","title":"Label a Model"},{"location":"viewer/manage-bim-models/#view-a-model","text":"Open model viewer by clicking the magnifier button or simply clicking on a model name.","title":"View a Model"},{"location":"viewer/manage-bim-models/#share-a-model","text":"A Share Settings dialog will pop up after switching on the toggle button. You can also open it from the three-dot menu. Once sharing is enabled, a model is accessible by anyone who has the link shown in the dialog. Login is not required to view a shared model. It is not possible to make any change to it via the link. But we strongly suggest set a password to protect your model and only share it privately. To disable sharing, simply switch off the toggle button. Recently a basic comment functionality has been added to bimU.io Viewer that allows guest users to create markups or comment on markups within a password-protected BIM model without creating an account. When a password is set, guest users will then be asked to provide their name in addition to the password on the login screen. The name will be used for comments in the current session.","title":"Share a Model"},{"location":"viewer/manage-bim-models/#embed-a-model","text":"You can embed a model and view it within other web applications, such as Microsoft Teams or Microsoft SharePoint. More details can be found here .","title":"Embed a Model"},{"location":"viewer/manage-bim-models/#rename-a-model","text":"To rename a model, click the three-dot button and then click the Rename option from the context menu.","title":"Rename a Model"},{"location":"viewer/manage-bim-models/#delete-a-model","text":"To delete a model, click the three-dot button and then click the Delete option from the context menu. Note that this operation cannot be undone.","title":"Delete a Model"},{"location":"viewer/navigate-using-web-viewer/","text":"Nagivate Using Web Model Viewer \u00b6 Clicking the magnifier button or on a model name brings you to a web model viewer page. You can view your model in a 3D viewer along with BIM data and saved markups. Use 3D Viewer \u00b6 bimU.io's 3D viewer is web-based, which means that it is cross-platform and can be used on any device as long as you have a WebGL-enabled browser installed. We suggest use the latest version of Google Chrome to achieve the best performance. The viewer toolbar is located at the bottom of the 3D viewer. The status labels will be shown on the bottom left when you make changes, such as enabling sectiong, selecting elements, changing element visibility, etc. Basic Viewer Controls \u00b6 You can control the camera with the following tools to view the 3D scene from different perspectives. Orbit: The orbit tool allows you to rotate the camera around your model by using left mouse drag on desktop or one finger swipe on mobile devices. The camera will orbit around the centre of current selection or the previous zoom target. Pan: The pan tool allows you to move the camera vertically or horizontally by using right mouse drag on desktop or two-finger scroll on mobile devices. Zoom: The zoom tool allows you to zoom in to focus on a specific area or zoom out to see more of your model by using mouse wheel on desktop or two-finger pinch on mobile devices. The zoom speed will decrease gradually as the camera gets closer to the zoom target. Specfic Camera Viewpoints \u00b6 You can use the following tools to set camera viewpoint to specific areas you want to see. Zoom to Fit: This tool fits the entire model into the current viewport. It is particularly useful when you get lost in the 3D scene. Zoom to Selection: This tool fits the selected elements into the current viewport to focus on them. You can use this tool if a target is too far or too close to zoom. Set Viewpoint: This tool sets the current camera viewpoint from/to BIM software. See more details here . You must have bimU.io Launcher installed to set a viewpoint from/to BIM software. Rotate View: This tool can view your model from all sides of the bounding box, including top, bottom, front, back, left, and right. Section Cut \u00b6 You can enable sectioning to slice your model to view more details inside. To disable sectioning, use the Reset Visibility tool. Section Box: This tool cuts model geometry by a rectangular box. The six edges of the section box can be adjusted using the grips. Section around Selection: This tool creates a section box around the selected elements. Then you can expand it to view the adjacent area. Model Elements \u00b6 Select Elements: Use left mouse click to select a model element. Shift + Left click to select multiple elements. Hide Elements: This tool hides the selected elements. You can use the Reset Visibility tool to unhide them. Other Viewer Capabilities \u00b6 Reset Visibility: This tool unhides all hidden elements and disables sectioning. Measuring Tool: A few different measurement tools are available, such as reporting coordinates, measuring distance, height, angle, area, etc. Toogle Fullscreen: This tool presents the entire viewport of the 3D viewer in browser's fullscreen mode. Use Orthographic Camera: This tool can switch the camera between perspective and orthographic projection. Switch to Embedded Mode: This tool enables the embedded mode which isolates the 3D viewer from the user interface. You can still view BIM data from the toolbar. It is particularly useful when the fullscreen mode is not supported, such as iOS devices. Work with Markups \u00b6 In bimU.io, a markup is more than an image with some sketches. In addition to adding lines, shapes, freehand drawings, texts, etc. to annotate a screenshot of model view, every markup can capture a camera viewpoint and include a short description. You can then navigate to this location in a model later by opening the viewpoint in the 3D viewer or other BIM software. The concept is similar to BIM Collaboration Format (BCF). bimU.io Agile, our full-fledged BIM issue tracking solution, will also support BCF in late 2021. Create a Markup \u00b6 Click the Create Markup placeholder in the Markup Tab and a dialog will pop up where you can find various drawing and annotation tools. If you want to paste an image taken from elsewhere, simply paste it from clipboard into the dialog by Ctrl + V. Add some description and Click Save when you are done. If your shared model is password-protected, guest users will be able to create markups, too. View a Markup \u00b6 All markups attached to a model are shown in the Markup Tab . Click a thumbnail to enlarge it and view its details. You can also edit description, download image, or delete it in the lightbox. Comment on a Markup \u00b6 Guest users are now able to create markups and leave comments within a password-protected BIM model without creating an account. Once your BIM model is shared via a password-protected link, whoever has the link and knows the password can also create markups or leave comments on markups. Open Viewpoint in Web Viewer \u00b6 A viewpoint attached to a markup can be opened directly in the 3D viewer. It would restore previous camera location, angle, sectioning state, etc. Open Viewpoint in BIM Software \u00b6 You must have bimU.io Launcher installed to open a viewpoint in BIM software. Make sure bimU.io Launcher is running and connected to browser. Then you can open a saved viewpoint in any supported BIM software as long as a corresponding model file is also opened. More details around bimU.io Launcher can be found here . The latest version of bimU.io Launcher supports setting camera viewpoint from/to Solibri. Please make sure Solibri is opened with REST API enabled and bimU.io Launcher is running in the background. We've created a Windows program called Start Solibri that does everything needed to use this function. You can find it in the Start Menu => bimU.io (or Transformosa ) => Start Solibri . View BIM Data \u00b6 Uploaded BIM data normally consists of document information, element properties, and file metadata which can be viewed from the following three tabs. Model Tab \u00b6 Model specific data refers to document-level information, such as project details, location, coordinate system, other authoring software metadata, etc. Element Tab \u00b6 Model element data includes all properties of a selected element. It can be a Revit Parameter , a Navisworks Property , a Tekla Attribute , or an IfcPropertySingleValue . File Tab \u00b6 These are file properties specific to bimU.io, such as model source, file size, timestamp, etc. Mobile User Interface \u00b6 A simplified user interface will be enabled on a mobile device if the screen size is too small. You can still view BIM data from the toolbar though some of the tools might be disabled. The main user interface might be available if you change device orientation to landscape mode and then refresh the entire page. bimU.io Reality - Augmented Reality \u00b6 bimU.io Reality is an interactive 3D visualisation tool that animates Digital Twin in real-world environment. Every BIM model hosted on bimU.io Viewer can be displayed in Augmented Reality in minutes. bimU.io Reality is a web-based, full-featured, easy-to-use Augmented Reality application that overlays BIM models into the physical world \u2014 as if they\u2019re actually there with you, in your own space. It is the best stakeholder engagement tool that offers interactivity and intuitiveness for facilitating 3D model navigation and BIM design review. Check out this blog post for more details.","title":"Navigate Using Web Viewer"},{"location":"viewer/navigate-using-web-viewer/#nagivate-using-web-model-viewer","text":"Clicking the magnifier button or on a model name brings you to a web model viewer page. You can view your model in a 3D viewer along with BIM data and saved markups.","title":"Nagivate Using Web Model Viewer"},{"location":"viewer/navigate-using-web-viewer/#use-3d-viewer","text":"bimU.io's 3D viewer is web-based, which means that it is cross-platform and can be used on any device as long as you have a WebGL-enabled browser installed. We suggest use the latest version of Google Chrome to achieve the best performance. The viewer toolbar is located at the bottom of the 3D viewer. The status labels will be shown on the bottom left when you make changes, such as enabling sectiong, selecting elements, changing element visibility, etc.","title":"Use 3D Viewer"},{"location":"viewer/navigate-using-web-viewer/#basic-viewer-controls","text":"You can control the camera with the following tools to view the 3D scene from different perspectives. Orbit: The orbit tool allows you to rotate the camera around your model by using left mouse drag on desktop or one finger swipe on mobile devices. The camera will orbit around the centre of current selection or the previous zoom target. Pan: The pan tool allows you to move the camera vertically or horizontally by using right mouse drag on desktop or two-finger scroll on mobile devices. Zoom: The zoom tool allows you to zoom in to focus on a specific area or zoom out to see more of your model by using mouse wheel on desktop or two-finger pinch on mobile devices. The zoom speed will decrease gradually as the camera gets closer to the zoom target.","title":"Basic Viewer Controls"},{"location":"viewer/navigate-using-web-viewer/#specfic-camera-viewpoints","text":"You can use the following tools to set camera viewpoint to specific areas you want to see. Zoom to Fit: This tool fits the entire model into the current viewport. It is particularly useful when you get lost in the 3D scene. Zoom to Selection: This tool fits the selected elements into the current viewport to focus on them. You can use this tool if a target is too far or too close to zoom. Set Viewpoint: This tool sets the current camera viewpoint from/to BIM software. See more details here . You must have bimU.io Launcher installed to set a viewpoint from/to BIM software. Rotate View: This tool can view your model from all sides of the bounding box, including top, bottom, front, back, left, and right.","title":"Specfic Camera Viewpoints"},{"location":"viewer/navigate-using-web-viewer/#section-cut","text":"You can enable sectioning to slice your model to view more details inside. To disable sectioning, use the Reset Visibility tool. Section Box: This tool cuts model geometry by a rectangular box. The six edges of the section box can be adjusted using the grips. Section around Selection: This tool creates a section box around the selected elements. Then you can expand it to view the adjacent area.","title":"Section Cut"},{"location":"viewer/navigate-using-web-viewer/#model-elements","text":"Select Elements: Use left mouse click to select a model element. Shift + Left click to select multiple elements. Hide Elements: This tool hides the selected elements. You can use the Reset Visibility tool to unhide them.","title":"Model Elements"},{"location":"viewer/navigate-using-web-viewer/#other-viewer-capabilities","text":"Reset Visibility: This tool unhides all hidden elements and disables sectioning. Measuring Tool: A few different measurement tools are available, such as reporting coordinates, measuring distance, height, angle, area, etc. Toogle Fullscreen: This tool presents the entire viewport of the 3D viewer in browser's fullscreen mode. Use Orthographic Camera: This tool can switch the camera between perspective and orthographic projection. Switch to Embedded Mode: This tool enables the embedded mode which isolates the 3D viewer from the user interface. You can still view BIM data from the toolbar. It is particularly useful when the fullscreen mode is not supported, such as iOS devices.","title":"Other Viewer Capabilities"},{"location":"viewer/navigate-using-web-viewer/#work-with-markups","text":"In bimU.io, a markup is more than an image with some sketches. In addition to adding lines, shapes, freehand drawings, texts, etc. to annotate a screenshot of model view, every markup can capture a camera viewpoint and include a short description. You can then navigate to this location in a model later by opening the viewpoint in the 3D viewer or other BIM software. The concept is similar to BIM Collaboration Format (BCF). bimU.io Agile, our full-fledged BIM issue tracking solution, will also support BCF in late 2021.","title":"Work with Markups"},{"location":"viewer/navigate-using-web-viewer/#create-a-markup","text":"Click the Create Markup placeholder in the Markup Tab and a dialog will pop up where you can find various drawing and annotation tools. If you want to paste an image taken from elsewhere, simply paste it from clipboard into the dialog by Ctrl + V. Add some description and Click Save when you are done. If your shared model is password-protected, guest users will be able to create markups, too.","title":"Create a Markup"},{"location":"viewer/navigate-using-web-viewer/#view-a-markup","text":"All markups attached to a model are shown in the Markup Tab . Click a thumbnail to enlarge it and view its details. You can also edit description, download image, or delete it in the lightbox.","title":"View a Markup"},{"location":"viewer/navigate-using-web-viewer/#comment-on-a-markup","text":"Guest users are now able to create markups and leave comments within a password-protected BIM model without creating an account. Once your BIM model is shared via a password-protected link, whoever has the link and knows the password can also create markups or leave comments on markups.","title":"Comment on a Markup"},{"location":"viewer/navigate-using-web-viewer/#open-viewpoint-in-web-viewer","text":"A viewpoint attached to a markup can be opened directly in the 3D viewer. It would restore previous camera location, angle, sectioning state, etc.","title":"Open Viewpoint in Web Viewer"},{"location":"viewer/navigate-using-web-viewer/#open-viewpoint-in-bim-software","text":"You must have bimU.io Launcher installed to open a viewpoint in BIM software. Make sure bimU.io Launcher is running and connected to browser. Then you can open a saved viewpoint in any supported BIM software as long as a corresponding model file is also opened. More details around bimU.io Launcher can be found here . The latest version of bimU.io Launcher supports setting camera viewpoint from/to Solibri. Please make sure Solibri is opened with REST API enabled and bimU.io Launcher is running in the background. We've created a Windows program called Start Solibri that does everything needed to use this function. You can find it in the Start Menu => bimU.io (or Transformosa ) => Start Solibri .","title":"Open Viewpoint in BIM Software"},{"location":"viewer/navigate-using-web-viewer/#view-bim-data","text":"Uploaded BIM data normally consists of document information, element properties, and file metadata which can be viewed from the following three tabs.","title":"View BIM Data"},{"location":"viewer/navigate-using-web-viewer/#model-tab","text":"Model specific data refers to document-level information, such as project details, location, coordinate system, other authoring software metadata, etc.","title":"Model Tab"},{"location":"viewer/navigate-using-web-viewer/#element-tab","text":"Model element data includes all properties of a selected element. It can be a Revit Parameter , a Navisworks Property , a Tekla Attribute , or an IfcPropertySingleValue .","title":"Element Tab"},{"location":"viewer/navigate-using-web-viewer/#file-tab","text":"These are file properties specific to bimU.io, such as model source, file size, timestamp, etc.","title":"File Tab"},{"location":"viewer/navigate-using-web-viewer/#mobile-user-interface","text":"A simplified user interface will be enabled on a mobile device if the screen size is too small. You can still view BIM data from the toolbar though some of the tools might be disabled. The main user interface might be available if you change device orientation to landscape mode and then refresh the entire page.","title":"Mobile User Interface"},{"location":"viewer/navigate-using-web-viewer/#bimuio-reality-augmented-reality","text":"bimU.io Reality is an interactive 3D visualisation tool that animates Digital Twin in real-world environment. Every BIM model hosted on bimU.io Viewer can be displayed in Augmented Reality in minutes. bimU.io Reality is a web-based, full-featured, easy-to-use Augmented Reality application that overlays BIM models into the physical world \u2014 as if they\u2019re actually there with you, in your own space. It is the best stakeholder engagement tool that offers interactivity and intuitiveness for facilitating 3D model navigation and BIM design review. Check out this blog post for more details.","title":"bimU.io Reality - Augmented Reality"},{"location":"viewer/privacy-policy/","text":"Data Retention and Privacy Policies \u00b6 Privacy Policy \u00b6 Your privacy is important to us. It is Transformosa Private Limited's policy to respect your privacy regarding any information we may collect from you across our website, https://bimu.io , and other sites we own and operate. We only ask for personal information when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we\u2019re collecting it and how it will be used. We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we\u2019ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorised access, disclosure, copying, use or modification. We don\u2019t share any personally identifying information publicly or with third-parties, except when required to by law. Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies. You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services. Your continued use of our website will be regarded as acceptance of our practices around privacy and personal information. If you have any questions about how we handle user data and personal information, feel free to contact us. This policy is effective as of 1 September 2019. Cookie Policy \u00b6 This is the Cookie Policy for bimU.io, accessible from https://bimu.io What Are Cookies \u00b6 As is common practice with almost all professional websites this site uses cookies, which are tiny files that are downloaded to your computer, to improve your experience. This page describes what information they gather, how we use it and why we sometimes need to store these cookies. We will also share how you can prevent these cookies from being stored however this may downgrade or 'break' certain elements of the sites functionality. For more general information on cookies see the Wikipedia article on HTTP Cookies. How We Use Cookies \u00b6 We use cookies for a variety of reasons detailed below. Unfortunately in most cases there are no industry standard options for disabling cookies without completely disabling the functionality and features they add to this site. It is recommended that you leave on all cookies if you are not sure whether you need them or not in case they are used to provide a service that you use. Disabling Cookies \u00b6 You can prevent the setting of cookies by adjusting the settings on your browser (see your browser Help for how to do this). Be aware that disabling cookies will affect the functionality of this and many other websites that you visit. Disabling cookies will usually result in also disabling certain functionality and features of the this site. Therefore it is recommended that you do not disable cookies. The Cookies We Set \u00b6 Account related cookies If you create an account with us then we will use cookies for the management of the signup process and general administration. These cookies will usually be deleted when you log out however in some cases they may remain afterwards to remember your site preferences when logged out. Login related cookies We use cookies when you are logged in so that we can remember this fact. This prevents you from having to log in every single time you visit a new page. These cookies are typically removed or cleared when you log out to ensure that you can only access restricted features and areas when logged in. Site preferences cookies In order to provide you with a great experience on this site we provide the functionality to set your preferences for how this site runs when you use it. In order to remember your preferences we need to set cookies so that this information can be called whenever you interact with a page is affected by your preferences. Third Party Cookies \u00b6 In some special cases we also use cookies provided by trusted third parties. The following section details which third party cookies you might encounter through this site. This site uses Google Analytics which is one of the most widespread and trusted analytics solution on the web for helping us to understand how you use the site and ways that we can improve your experience. These cookies may track things such as how long you spend on the site and the pages that you visit so we can continue to produce engaging content. For more information on Google Analytics cookies, see the official Google Analytics page. Data Retention \u00b6 Transformosa seeks to ensure that it retains only data necessary to effectively conduct its program activities and work in fulfilment of its mission. The need to retain data varies widely with the type of data and the purpose for which it was collected. Transformosa strives to ensure that data is only retained for the period necessary to fulfil the purpose for which it was collected and is fully deleted when no longer required. This policy sets forth Transformosa\u2019s guidelines on data retention and is to be consistently applied throughout the organisation. Scope \u00b6 This policy covers all data collected by Transformosa and stored on Transformosa owned or leased systems and media, regardless of location. It applies to both data collected and held electronically (including photographs, video and audio recordings) and data that is collected and held as hard copy or paper files. The need to retain certain information may be mandated by federal or local law, federal regulations and legitimate business purposes, as well as the EU General Data Protection Regulation (GDPR). Reasons for Data Retention \u00b6 Transformosa retains only that data that is necessary to effectively conduct its program activities, fulfill its mission and comply with applicable laws and regulations. Reasons for data retention include: Providing an ongoing service to the data subject (e.g. sending a newsletter, publication or ongoing program updates to an individual) Compliance with applicable labour, tax and immigration laws. Other regulatory requirements. Security incident or other investigation. Intellectual property preservation. Litigation. Data Duplication \u00b6 Transformosa seeks to avoid duplication in data storage whenever possible, though there may be instances in which for programmatic or other business reasons it is necessary for data to be held in more than one place. This policy applies to all data in Transformosa\u2019s possession, including duplicate copies of data. Retention Requirements \u00b6 Transformosa has set the following guidelines for retaining all personal data. Website visitor data will be retained as long as necessary to provide the service requested/initiated through the Transformosa-ownd websites. Contributor data will be retained for the year in which the individual has contributed and then for five years after the date of the last contribution. Financial information will not be retained longer than is necessary to process a single transaction. Event participant data will be retained for the period of the event, including any follow up activities, such as the distribution of reports, plus a period of two years; Personal data of subgrantees, subcontractors and vendors will be kept for the duration of the contract or agreement. Consultant (both paid and pro bono) data will be held for the duration of the consulting contract plus ten years after the end of the consultancy. Data associated with tax payments (including payroll, corporate and VAT) will be held for ten years. Data Destruction \u00b6 Data destruction ensures that Transformosa manages the data it controls and processes it in an efficient and responsible manner. When the retention period for the data as outlined above expires, Transformosa will actively destroy the data covered by this policy. If an individual believes that there exists a legitimate business reason why certain data should not be destroyed at the end of a retention period, he or she should identify this data to his/her supervisor and provide information as to why the data should not be destroyed. Any exceptions to this data retention policy must be approved by Transformosa\u2019s data protection offer in consultation with legal counsel. In rare circumstances, a litigation hold may be issued by legal counsel prohibiting the destruction of certain documents. A litigation hold remains in effect until released by legal counsel and prohibits the destruction of data subject to the hold. Data Deletion Request \u00b6 If you need to delete data from the services Transformosa offers for any reason, then you can send a data deletion request for its removal. You need to prove that you have the data ownership or full permission on your account. Please log a ticket on our support centre for this request. Data Residency \u00b6 Data residency refers to the physical or geographic location of an organisation's data or information. Many organizations in both the public and private sectors have data residency requirements, driven by a variety of factors. Please refer to the link below for data residency specific FAQs. https://support.bimu.io/portal/en/kb/faq/data-residency At Transformosa, we also offer a number of hosting solutions, such as private cloud deployment, to comply with the regulations. Please reach out to us for more information. Data Protection \u00b6 Please refer to the link below for data protection specific FAQs. https://support.bimu.io/portal/en/kb/faq/data-protection More Information \u00b6 Hopefully that has clarified things for you and as was previously mentioned if there is something that you aren't sure whether you need or not it's usually safer to leave cookies enabled in case it does interact with one of the features you use on our site. However if you are still looking for more information then you can contact us through one of our preferred contact methods: Email: support@bimu.io","title":"Privacy Policy"},{"location":"viewer/privacy-policy/#data-retention-and-privacy-policies","text":"","title":"Data Retention and Privacy Policies"},{"location":"viewer/privacy-policy/#privacy-policy","text":"Your privacy is important to us. It is Transformosa Private Limited's policy to respect your privacy regarding any information we may collect from you across our website, https://bimu.io , and other sites we own and operate. We only ask for personal information when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we\u2019re collecting it and how it will be used. We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we\u2019ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorised access, disclosure, copying, use or modification. We don\u2019t share any personally identifying information publicly or with third-parties, except when required to by law. Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies. You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services. Your continued use of our website will be regarded as acceptance of our practices around privacy and personal information. If you have any questions about how we handle user data and personal information, feel free to contact us. This policy is effective as of 1 September 2019.","title":"Privacy Policy"},{"location":"viewer/privacy-policy/#cookie-policy","text":"This is the Cookie Policy for bimU.io, accessible from https://bimu.io","title":"Cookie Policy"},{"location":"viewer/privacy-policy/#what-are-cookies","text":"As is common practice with almost all professional websites this site uses cookies, which are tiny files that are downloaded to your computer, to improve your experience. This page describes what information they gather, how we use it and why we sometimes need to store these cookies. We will also share how you can prevent these cookies from being stored however this may downgrade or 'break' certain elements of the sites functionality. For more general information on cookies see the Wikipedia article on HTTP Cookies.","title":"What Are Cookies"},{"location":"viewer/privacy-policy/#how-we-use-cookies","text":"We use cookies for a variety of reasons detailed below. Unfortunately in most cases there are no industry standard options for disabling cookies without completely disabling the functionality and features they add to this site. It is recommended that you leave on all cookies if you are not sure whether you need them or not in case they are used to provide a service that you use.","title":"How We Use Cookies"},{"location":"viewer/privacy-policy/#disabling-cookies","text":"You can prevent the setting of cookies by adjusting the settings on your browser (see your browser Help for how to do this). Be aware that disabling cookies will affect the functionality of this and many other websites that you visit. Disabling cookies will usually result in also disabling certain functionality and features of the this site. Therefore it is recommended that you do not disable cookies.","title":"Disabling Cookies"},{"location":"viewer/privacy-policy/#the-cookies-we-set","text":"Account related cookies If you create an account with us then we will use cookies for the management of the signup process and general administration. These cookies will usually be deleted when you log out however in some cases they may remain afterwards to remember your site preferences when logged out. Login related cookies We use cookies when you are logged in so that we can remember this fact. This prevents you from having to log in every single time you visit a new page. These cookies are typically removed or cleared when you log out to ensure that you can only access restricted features and areas when logged in. Site preferences cookies In order to provide you with a great experience on this site we provide the functionality to set your preferences for how this site runs when you use it. In order to remember your preferences we need to set cookies so that this information can be called whenever you interact with a page is affected by your preferences.","title":"The Cookies We Set"},{"location":"viewer/privacy-policy/#third-party-cookies","text":"In some special cases we also use cookies provided by trusted third parties. The following section details which third party cookies you might encounter through this site. This site uses Google Analytics which is one of the most widespread and trusted analytics solution on the web for helping us to understand how you use the site and ways that we can improve your experience. These cookies may track things such as how long you spend on the site and the pages that you visit so we can continue to produce engaging content. For more information on Google Analytics cookies, see the official Google Analytics page.","title":"Third Party Cookies"},{"location":"viewer/privacy-policy/#data-retention","text":"Transformosa seeks to ensure that it retains only data necessary to effectively conduct its program activities and work in fulfilment of its mission. The need to retain data varies widely with the type of data and the purpose for which it was collected. Transformosa strives to ensure that data is only retained for the period necessary to fulfil the purpose for which it was collected and is fully deleted when no longer required. This policy sets forth Transformosa\u2019s guidelines on data retention and is to be consistently applied throughout the organisation.","title":"Data Retention"},{"location":"viewer/privacy-policy/#scope","text":"This policy covers all data collected by Transformosa and stored on Transformosa owned or leased systems and media, regardless of location. It applies to both data collected and held electronically (including photographs, video and audio recordings) and data that is collected and held as hard copy or paper files. The need to retain certain information may be mandated by federal or local law, federal regulations and legitimate business purposes, as well as the EU General Data Protection Regulation (GDPR).","title":"Scope"},{"location":"viewer/privacy-policy/#reasons-for-data-retention","text":"Transformosa retains only that data that is necessary to effectively conduct its program activities, fulfill its mission and comply with applicable laws and regulations. Reasons for data retention include: Providing an ongoing service to the data subject (e.g. sending a newsletter, publication or ongoing program updates to an individual) Compliance with applicable labour, tax and immigration laws. Other regulatory requirements. Security incident or other investigation. Intellectual property preservation. Litigation.","title":"Reasons for Data Retention"},{"location":"viewer/privacy-policy/#data-duplication","text":"Transformosa seeks to avoid duplication in data storage whenever possible, though there may be instances in which for programmatic or other business reasons it is necessary for data to be held in more than one place. This policy applies to all data in Transformosa\u2019s possession, including duplicate copies of data.","title":"Data Duplication"},{"location":"viewer/privacy-policy/#retention-requirements","text":"Transformosa has set the following guidelines for retaining all personal data. Website visitor data will be retained as long as necessary to provide the service requested/initiated through the Transformosa-ownd websites. Contributor data will be retained for the year in which the individual has contributed and then for five years after the date of the last contribution. Financial information will not be retained longer than is necessary to process a single transaction. Event participant data will be retained for the period of the event, including any follow up activities, such as the distribution of reports, plus a period of two years; Personal data of subgrantees, subcontractors and vendors will be kept for the duration of the contract or agreement. Consultant (both paid and pro bono) data will be held for the duration of the consulting contract plus ten years after the end of the consultancy. Data associated with tax payments (including payroll, corporate and VAT) will be held for ten years.","title":"Retention Requirements"},{"location":"viewer/privacy-policy/#data-destruction","text":"Data destruction ensures that Transformosa manages the data it controls and processes it in an efficient and responsible manner. When the retention period for the data as outlined above expires, Transformosa will actively destroy the data covered by this policy. If an individual believes that there exists a legitimate business reason why certain data should not be destroyed at the end of a retention period, he or she should identify this data to his/her supervisor and provide information as to why the data should not be destroyed. Any exceptions to this data retention policy must be approved by Transformosa\u2019s data protection offer in consultation with legal counsel. In rare circumstances, a litigation hold may be issued by legal counsel prohibiting the destruction of certain documents. A litigation hold remains in effect until released by legal counsel and prohibits the destruction of data subject to the hold.","title":"Data Destruction"},{"location":"viewer/privacy-policy/#data-deletion-request","text":"If you need to delete data from the services Transformosa offers for any reason, then you can send a data deletion request for its removal. You need to prove that you have the data ownership or full permission on your account. Please log a ticket on our support centre for this request.","title":"Data Deletion Request"},{"location":"viewer/privacy-policy/#data-residency","text":"Data residency refers to the physical or geographic location of an organisation's data or information. Many organizations in both the public and private sectors have data residency requirements, driven by a variety of factors. Please refer to the link below for data residency specific FAQs. https://support.bimu.io/portal/en/kb/faq/data-residency At Transformosa, we also offer a number of hosting solutions, such as private cloud deployment, to comply with the regulations. Please reach out to us for more information.","title":"Data Residency"},{"location":"viewer/privacy-policy/#data-protection","text":"Please refer to the link below for data protection specific FAQs. https://support.bimu.io/portal/en/kb/faq/data-protection","title":"Data Protection"},{"location":"viewer/privacy-policy/#more-information","text":"Hopefully that has clarified things for you and as was previously mentioned if there is something that you aren't sure whether you need or not it's usually safer to leave cookies enabled in case it does interact with one of the features you use on our site. However if you are still looking for more information then you can contact us through one of our preferred contact methods: Email: support@bimu.io","title":"More Information"},{"location":"viewer/release-notes/","text":"Release Notes \u00b6 2021.02.08 \u00b6 bimU.io Launcher supports Autodesk Revit/Navisworks 2021, Trimble Tekla Structures 2020, and Solibri. 2021.01.16 \u00b6 Augmented Reality support. 2020.08.27 \u00b6 bimU.io Viewer API generally available. 2020.04.05 \u00b6 Allow guest users to create markups and leave comments without creating account. 2020.02.16 \u00b6 Large model support. 2019.09.16 \u00b6 Public release. 2019.02.11 \u00b6 Beta release. Early adopter programme.","title":"Release Notes"},{"location":"viewer/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"viewer/release-notes/#20210208","text":"bimU.io Launcher supports Autodesk Revit/Navisworks 2021, Trimble Tekla Structures 2020, and Solibri.","title":"2021.02.08"},{"location":"viewer/release-notes/#20210116","text":"Augmented Reality support.","title":"2021.01.16"},{"location":"viewer/release-notes/#20200827","text":"bimU.io Viewer API generally available.","title":"2020.08.27"},{"location":"viewer/release-notes/#20200405","text":"Allow guest users to create markups and leave comments without creating account.","title":"2020.04.05"},{"location":"viewer/release-notes/#20200216","text":"Large model support.","title":"2020.02.16"},{"location":"viewer/release-notes/#20190916","text":"Public release.","title":"2019.09.16"},{"location":"viewer/release-notes/#20190211","text":"Beta release. Early adopter programme.","title":"2019.02.11"},{"location":"viewer/terms-of-service/","text":"Transformosa Private Limited Terms of Service \u00b6 1. Terms \u00b6 By accessing the website at https://bimu.io , you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law. 2. Use License \u00b6 a. Permission is granted to temporarily download one copy of the materials (information or software) on Transformosa Private Limited's website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: i. modify or copy the materials; ii. use the materials for any commercial purpose, or for any public display (commercial or non-commercial); iii. attempt to decompile or reverse engineer any software contained on Transformosa Private Limited's website; iv. remove any copyright or other proprietary notations from the materials; or v.transfer the materials to another person or \"mirror\" the materials on any other server. b. This license shall automatically terminate if you violate any of these restrictions and may be terminated by Transformosa Private Limited at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format. 3. Disclaimer \u00b6 a. The materials on Transformosa Private Limited's website are provided on an 'as is' basis. Transformosa Private Limited makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. b. Further, Transformosa Private Limited does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site. 4. Limitations \u00b6 In no event shall Transformosa Private Limited or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on Transformosa Private Limited's website, even if Transformosa Private Limited or a Transformosa Private Limited authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you. 5. Accuracy of materials \u00b6 The materials appearing on Transformosa Private Limited's website could include technical, typographical, or photographic errors. Transformosa Private Limited does not warrant that any of the materials on its website are accurate, complete or current. Transformosa Private Limited may make changes to the materials contained on its website at any time without notice. However Transformosa Private Limited does not make any commitment to update the materials. 6. Links \u00b6 Transformosa Private Limited has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by Transformosa Private Limited of the site. Use of any such linked website is at the user's own risk. 7. Modifications \u00b6 Transformosa Private Limited may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service. 8. Governing Law \u00b6 These terms and conditions are governed by and construed in accordance with the laws of United Kingdom and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location.","title":"Terms of Service"},{"location":"viewer/terms-of-service/#transformosa-private-limited-terms-of-service","text":"","title":"Transformosa Private Limited Terms of Service"},{"location":"viewer/terms-of-service/#1-terms","text":"By accessing the website at https://bimu.io , you are agreeing to be bound by these terms of service, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law.","title":"1. Terms"},{"location":"viewer/terms-of-service/#2-use-license","text":"a. Permission is granted to temporarily download one copy of the materials (information or software) on Transformosa Private Limited's website for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not: i. modify or copy the materials; ii. use the materials for any commercial purpose, or for any public display (commercial or non-commercial); iii. attempt to decompile or reverse engineer any software contained on Transformosa Private Limited's website; iv. remove any copyright or other proprietary notations from the materials; or v.transfer the materials to another person or \"mirror\" the materials on any other server. b. This license shall automatically terminate if you violate any of these restrictions and may be terminated by Transformosa Private Limited at any time. Upon terminating your viewing of these materials or upon the termination of this license, you must destroy any downloaded materials in your possession whether in electronic or printed format.","title":"2. Use License"},{"location":"viewer/terms-of-service/#3-disclaimer","text":"a. The materials on Transformosa Private Limited's website are provided on an 'as is' basis. Transformosa Private Limited makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights. b. Further, Transformosa Private Limited does not warrant or make any representations concerning the accuracy, likely results, or reliability of the use of the materials on its website or otherwise relating to such materials or on any sites linked to this site.","title":"3. Disclaimer"},{"location":"viewer/terms-of-service/#4-limitations","text":"In no event shall Transformosa Private Limited or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on Transformosa Private Limited's website, even if Transformosa Private Limited or a Transformosa Private Limited authorized representative has been notified orally or in writing of the possibility of such damage. Because some jurisdictions do not allow limitations on implied warranties, or limitations of liability for consequential or incidental damages, these limitations may not apply to you.","title":"4. Limitations"},{"location":"viewer/terms-of-service/#5-accuracy-of-materials","text":"The materials appearing on Transformosa Private Limited's website could include technical, typographical, or photographic errors. Transformosa Private Limited does not warrant that any of the materials on its website are accurate, complete or current. Transformosa Private Limited may make changes to the materials contained on its website at any time without notice. However Transformosa Private Limited does not make any commitment to update the materials.","title":"5. Accuracy of materials"},{"location":"viewer/terms-of-service/#6-links","text":"Transformosa Private Limited has not reviewed all of the sites linked to its website and is not responsible for the contents of any such linked site. The inclusion of any link does not imply endorsement by Transformosa Private Limited of the site. Use of any such linked website is at the user's own risk.","title":"6. Links"},{"location":"viewer/terms-of-service/#7-modifications","text":"Transformosa Private Limited may revise these terms of service for its website at any time without notice. By using this website you are agreeing to be bound by the then current version of these terms of service.","title":"7. Modifications"},{"location":"viewer/terms-of-service/#8-governing-law","text":"These terms and conditions are governed by and construed in accordance with the laws of United Kingdom and you irrevocably submit to the exclusive jurisdiction of the courts in that State or location.","title":"8. Governing Law"},{"location":"viewer/upload-a-bim-model/","text":"Upload a BIM Model \u00b6 There are two ways to upload your BIM models: Upload from BIM Software: Uploading from a BIM model view within authoring software gives you more control of how it looks like on bimU.io. What You See Is What You Get (WYSIWYG). Please follow the instructions in the next section to install the bimU.io Launcher before uploading a BIM model from authoring software. Upload IFC files: The industry standard IFC (Industry Foundation Classes) format is also supported. Most authoring software can export to an IFC file. You can then upload it to bimU.io directly. Install bimU.io Launcher \u00b6 Note that you must have bimU.io Launcher installed to upload a model from BIM software. What is bimU.io Launcher? \u00b6 bimU.io Launcher is a middleware that exchanges data between bimU.io and BIM software. It is a background process running along with BIM software without a user interface. Unlike other third-party tools that require a plugin opened manually within various BIM software for exporting data, bimU.io Launcher implements the so-called Pluginless technology which allows users to stick with a single user interface, i.e., using bimU.io via browser. Supported BIM Software \u00b6 Autodesk Revit 2014-2021 Autodesk Navisworks 2014-2021 Trimble Tekla Structures 21.0-2020 Solibri 9.12.1 (Open viewpoint only) Download Installer \u00b6 Download bimU.io Launcher 2021.2.8.0 Please close all BIM software sessions prior to installation. The latest version of bimU.io Launcher is 2021.2.8.0. The installer can downloaded from the link above. Technically speaking, admin right is NOT required for the installation. Please speak to your IT staffs if you don't have permission to install it. Automatic Update \u00b6 bimU.io Launcher performs automatic update behind the scene for the installed components. However, you will need to download a new installer for a new version of BIM software. For example, bimU.io Launcher can update itself for Autodesk software 2014-2021 whenever bimU.io has a new release or a bug fixed. But a new installer will be required to support Autodesk software 2022 next year. You can check out the installed version fo bimU.io Launcher from the top menu bar. For an automatic update to take effect immediately, we suggest repeat the following steps twice : Restart your machine or log off Windows. Make sure you have a stable internet connection. Open any supported BIM software. Open any file and wait for one minute. Troubleshooting \u00b6 If you have any problem installing or using bimU.io Launcher, please log a support ticket with the following two items attached if they exist: Log File: Open Windows File Explorer and paste %localappdata%\\temp\\bimU.io.log in the address bar. The log file is stored as launcher.log in the folder. Error Code: An error code, such as No BIM software is currently opened. Error code: 1002 , would be shown in browser when something goes wrong on bimU.io. Upload from BIM Software \u00b6 Uploading from various BIM software has similar steps on bimU.io: Open a 3D model view in any supported BIM software. Make sure visisblity and appearance of model elements are as desired. Click the plus button in the top menu bar and select Upload from BIM Software . Select a Model Source (i.e., BIM software) where you want to upload from. Review screenshot and click the Refresh icon button if you want to start over. Change Model Name if you want a different one from current filename. Click the Upload button to proceed. Every BIM software handles 3D computer graphics differently. The general rules for bimU.io export are: Only visible model elements in the current 3D view are exported. Model unit is converted to meter. Materials are exported without textures. See below for more details around how bimU.io exports a model from every BIM software. Export from Autodesk Revit \u00b6 2D View , Family Document and Analytical Model are NOT supported for export at the moment. You must have a 3D View opened to start the upload process. Visible Linked Models in the current 3D View are exported, too. Visisblity and appearance of Elements can be determined based on a number of factors, such as Section Box , Visibility/Graphic Override , Temporary Hide/Isolate , etc. Both Type Parameters and Instance Parameters are exported. Some file metadata, such as Document properties, Project Information , Project Position , Site Location , etc. are exported, too. Model coordinates are converted to Shared Coordinates . Export from Autodesk Navisworks \u00b6 Appearance of Model Items can be determined by Color and Transparency Override . However, Sectioning is NOT currently supported. If you don't want to export some of the Model Items , you'll have to select and hide them manually. Most of the Properties shown in the Properties Window are exported, including Document -level properties. Export from Trimble Tekla Structures \u00b6 Visible Model Objects in the active Work Area are exported. Color settings are defined by Tekla and cannot be changed. The exported Model Objects include Part , Assembly , Pour Object , Base Component . The exported properties include Model Information , Project Information , User-Defined Attributes , and the properties defined in the Global Attributes . Export from Other BIM Software \u00b6 bimU.io Launcher doesn't integrate with other BIM software at the moment. As a workaround, you can export to an IFC file from most BIM authoring software, such as Graphisoft ArchiCAD, Bentley OpeningBuildings Designer (formerly AECOsim Building Designer), etc. Monitor Progress \u00b6 DO NOT close browser window before the upload is finished. You can check out the progress from the top menu bar while a model is being exported and uploaded. You might cancel it if necessary. Upload an IFC File \u00b6 Both IFC 2x3 and IFC 4 formats are supported. Uploading an IFC file is quite straightforward. Simply click the plus button in the top menu bar and select Upload IFC File . The upload process will start as soon as you select or drag and drop an IFC file in the dialog. Upload Other 3D File Formats \u00b6 We aim to support more and more authoring software and 3D file formats in the future. The below items have been prioritised for developement. Note that the delivery timelines may change. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates. McNeel Rhinoceros 3D (.3dm) Trimble SketchUp (.skp) Notifications \u00b6 bimU.io will process your model immediately after upload. Depending on file size, it can often be done in minutes. When a model is ready to view, you will receive an email notification and also a browser notification if you have bimU.io opened. Current Limitations \u00b6 To optimise computing and storage resources, bimU.io limits the size of a model that you can upload to bimU.io Viewer Free . Currently, the following soft limits apply per model file and will be increased for paid users in the near future. These should be sufficient for most use cases. Compressed upload file size: 250 MB Number of visible model elements: 200,000 Uncompressed model geometry size: 2,500 MB IFC upload file size: 150 MB","title":"Upload a BIM model"},{"location":"viewer/upload-a-bim-model/#upload-a-bim-model","text":"There are two ways to upload your BIM models: Upload from BIM Software: Uploading from a BIM model view within authoring software gives you more control of how it looks like on bimU.io. What You See Is What You Get (WYSIWYG). Please follow the instructions in the next section to install the bimU.io Launcher before uploading a BIM model from authoring software. Upload IFC files: The industry standard IFC (Industry Foundation Classes) format is also supported. Most authoring software can export to an IFC file. You can then upload it to bimU.io directly.","title":"Upload a BIM Model"},{"location":"viewer/upload-a-bim-model/#install-bimuio-launcher","text":"Note that you must have bimU.io Launcher installed to upload a model from BIM software.","title":"Install bimU.io Launcher"},{"location":"viewer/upload-a-bim-model/#what-is-bimuio-launcher","text":"bimU.io Launcher is a middleware that exchanges data between bimU.io and BIM software. It is a background process running along with BIM software without a user interface. Unlike other third-party tools that require a plugin opened manually within various BIM software for exporting data, bimU.io Launcher implements the so-called Pluginless technology which allows users to stick with a single user interface, i.e., using bimU.io via browser.","title":"What is bimU.io Launcher?"},{"location":"viewer/upload-a-bim-model/#supported-bim-software","text":"Autodesk Revit 2014-2021 Autodesk Navisworks 2014-2021 Trimble Tekla Structures 21.0-2020 Solibri 9.12.1 (Open viewpoint only)","title":"Supported BIM Software"},{"location":"viewer/upload-a-bim-model/#download-installer","text":"Download bimU.io Launcher 2021.2.8.0 Please close all BIM software sessions prior to installation. The latest version of bimU.io Launcher is 2021.2.8.0. The installer can downloaded from the link above. Technically speaking, admin right is NOT required for the installation. Please speak to your IT staffs if you don't have permission to install it.","title":"Download Installer"},{"location":"viewer/upload-a-bim-model/#automatic-update","text":"bimU.io Launcher performs automatic update behind the scene for the installed components. However, you will need to download a new installer for a new version of BIM software. For example, bimU.io Launcher can update itself for Autodesk software 2014-2021 whenever bimU.io has a new release or a bug fixed. But a new installer will be required to support Autodesk software 2022 next year. You can check out the installed version fo bimU.io Launcher from the top menu bar. For an automatic update to take effect immediately, we suggest repeat the following steps twice : Restart your machine or log off Windows. Make sure you have a stable internet connection. Open any supported BIM software. Open any file and wait for one minute.","title":"Automatic Update"},{"location":"viewer/upload-a-bim-model/#troubleshooting","text":"If you have any problem installing or using bimU.io Launcher, please log a support ticket with the following two items attached if they exist: Log File: Open Windows File Explorer and paste %localappdata%\\temp\\bimU.io.log in the address bar. The log file is stored as launcher.log in the folder. Error Code: An error code, such as No BIM software is currently opened. Error code: 1002 , would be shown in browser when something goes wrong on bimU.io.","title":"Troubleshooting"},{"location":"viewer/upload-a-bim-model/#upload-from-bim-software","text":"Uploading from various BIM software has similar steps on bimU.io: Open a 3D model view in any supported BIM software. Make sure visisblity and appearance of model elements are as desired. Click the plus button in the top menu bar and select Upload from BIM Software . Select a Model Source (i.e., BIM software) where you want to upload from. Review screenshot and click the Refresh icon button if you want to start over. Change Model Name if you want a different one from current filename. Click the Upload button to proceed. Every BIM software handles 3D computer graphics differently. The general rules for bimU.io export are: Only visible model elements in the current 3D view are exported. Model unit is converted to meter. Materials are exported without textures. See below for more details around how bimU.io exports a model from every BIM software.","title":"Upload from BIM Software"},{"location":"viewer/upload-a-bim-model/#export-from-autodesk-revit","text":"2D View , Family Document and Analytical Model are NOT supported for export at the moment. You must have a 3D View opened to start the upload process. Visible Linked Models in the current 3D View are exported, too. Visisblity and appearance of Elements can be determined based on a number of factors, such as Section Box , Visibility/Graphic Override , Temporary Hide/Isolate , etc. Both Type Parameters and Instance Parameters are exported. Some file metadata, such as Document properties, Project Information , Project Position , Site Location , etc. are exported, too. Model coordinates are converted to Shared Coordinates .","title":"Export from Autodesk Revit"},{"location":"viewer/upload-a-bim-model/#export-from-autodesk-navisworks","text":"Appearance of Model Items can be determined by Color and Transparency Override . However, Sectioning is NOT currently supported. If you don't want to export some of the Model Items , you'll have to select and hide them manually. Most of the Properties shown in the Properties Window are exported, including Document -level properties.","title":"Export from Autodesk Navisworks"},{"location":"viewer/upload-a-bim-model/#export-from-trimble-tekla-structures","text":"Visible Model Objects in the active Work Area are exported. Color settings are defined by Tekla and cannot be changed. The exported Model Objects include Part , Assembly , Pour Object , Base Component . The exported properties include Model Information , Project Information , User-Defined Attributes , and the properties defined in the Global Attributes .","title":"Export from Trimble Tekla Structures"},{"location":"viewer/upload-a-bim-model/#export-from-other-bim-software","text":"bimU.io Launcher doesn't integrate with other BIM software at the moment. As a workaround, you can export to an IFC file from most BIM authoring software, such as Graphisoft ArchiCAD, Bentley OpeningBuildings Designer (formerly AECOsim Building Designer), etc.","title":"Export from Other BIM Software"},{"location":"viewer/upload-a-bim-model/#monitor-progress","text":"DO NOT close browser window before the upload is finished. You can check out the progress from the top menu bar while a model is being exported and uploaded. You might cancel it if necessary.","title":"Monitor Progress"},{"location":"viewer/upload-a-bim-model/#upload-an-ifc-file","text":"Both IFC 2x3 and IFC 4 formats are supported. Uploading an IFC file is quite straightforward. Simply click the plus button in the top menu bar and select Upload IFC File . The upload process will start as soon as you select or drag and drop an IFC file in the dialog.","title":"Upload an IFC File"},{"location":"viewer/upload-a-bim-model/#upload-other-3d-file-formats","text":"We aim to support more and more authoring software and 3D file formats in the future. The below items have been prioritised for developement. Note that the delivery timelines may change. Stay tuned on our our social media ( Twitter , Facebook , YouTube , Blog ) for the updates. McNeel Rhinoceros 3D (.3dm) Trimble SketchUp (.skp)","title":"Upload Other 3D File Formats"},{"location":"viewer/upload-a-bim-model/#notifications","text":"bimU.io will process your model immediately after upload. Depending on file size, it can often be done in minutes. When a model is ready to view, you will receive an email notification and also a browser notification if you have bimU.io opened.","title":"Notifications"},{"location":"viewer/upload-a-bim-model/#current-limitations","text":"To optimise computing and storage resources, bimU.io limits the size of a model that you can upload to bimU.io Viewer Free . Currently, the following soft limits apply per model file and will be increased for paid users in the near future. These should be sufficient for most use cases. Compressed upload file size: 250 MB Number of visible model elements: 200,000 Uncompressed model geometry size: 2,500 MB IFC upload file size: 150 MB","title":"Current Limitations"}]}